{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":0,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":0,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1561430452928},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1561430452929},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1561430452934},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1561430452935},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1561430452936},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1561430452936},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1561430452938},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1561430452925},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1561430452935},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1561430452941},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1561430452937},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1561430452942},{"_id":"themes/next/_config.yml","hash":"9f0c1fb7c1193a5f9989b4932ac7535f7b321f99","modified":1580803456014},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1561430452939},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1561430452940},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1561430453071},{"_id":"source/_posts/golang拾遗一.md","hash":"b1d6f6660d71b9bd3e34723ee25341d0cad5d79f","modified":1580800913420},{"_id":"source/_posts/golang拾遗三测试.md","hash":"f8bf31e292eddcc05b2ce5737864ca9bfc79fea8","modified":1580801185757},{"_id":"source/_posts/golang拾遗二多线程.md","hash":"ce74b38c26a5e1d29f9c465dd45bf54d2567fd20","modified":1580800973824},{"_id":"source/_posts/基础概念之原码与补码.md","hash":"0fc6621e321ccf04d2ee2e025ca500a62853f4d0","modified":1580801140362},{"_id":"source/_drafts/hello-world.md","hash":"3a6751373ffc2a58b872b434a8b10fb6b525595a","modified":1562507923237},{"_id":"source/_posts/kafka在docker中的安装与使用.md","hash":"d6b712788d6b57dd79590a76a95f5bdfcc258ca3","modified":1580801118767},{"_id":"source/images/pasted-2.png","hash":"6c3c4d191f1137f31ce74976e0cc825e7ba78203","modified":1562507923249},{"_id":"source/about/index.md","hash":"d6e6c89dca0afde09f2ced5acacef6719f99dbcf","modified":1562509989738},{"_id":"source/_posts/Hexo-nexT的使用.md","hash":"17f8b0ea3b577a2ad649a124735081c5316e00d1","modified":1580800538008},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1561430452930},{"_id":"source/tags/index.md","hash":"b474d431ce68912ea38f41a5d011e043be017b0b","modified":1562510080753},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1561430452932},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1561430452933},{"_id":"source/images/pasted-0.png","hash":"d9325a9639adbf6eeb0e3ea8bf0abd5936c073cd","modified":1561508733984},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1561430452945},{"_id":"source/images/avatar.jpg","hash":"af9862a94c8798dd6e099cc60f7b64bbe1479c6a","modified":1404174532000},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1561430452946},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1561430452947},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1561430452948},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1561430452949},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1561430452951},{"_id":"source/categories/index.md","hash":"260b0bd58ad4307c11a53efd307b43a299da2e69","modified":1562510088769},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1561430452953},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1561430452954},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1561430452955},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1561430452952},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1561430452956},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1561430452956},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1561430452958},{"_id":"themes/next/layout/_layout.swig","hash":"51cd0ebecba74ba9e84c7bebdca227674b3f575c","modified":1580802112036},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1561430453064},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1561430453066},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1561430453067},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1561430453068},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1561430453069},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1561430453070},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1561430453071},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1561430452959},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1561430453073},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1561430453074},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1561430453483},{"_id":"source/_posts/React-重学.md","hash":"b5e76794966adbb9852c1aeb5ea3d63cbb873958","modified":1580801212881},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1561430452934},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1561430452963},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1561430452962},{"_id":"source/images/pasted-1.png","hash":"c9f5dcc9e0ded0cbdd66eea4a5f9805512b3ca12","modified":1562157837620},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1561430453485},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1561430453486},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561430453235},{"_id":"source/images/pasted-3.png","hash":"d3919a968a0fba46f968022479ae7a0099fa6d0a","modified":1562507923252},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1561430452967},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1561430452968},{"_id":"themes/next/layout/_macro/post.swig","hash":"fa3b80623bd4b9dbc798905b9209ab8d6e903a7a","modified":1580802508365},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1561430452970},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1561430452973},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1561430452971},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1561430452975},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1561430452974},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1561430452979},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1561430452981},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1561430452983},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1561430452987},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1561430452988},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1561430452989},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1561430452990},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1561430453006},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1561430453005},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1561430453015},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1561430453046},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1561430453047},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1561430453049},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1561430453052},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1561430453053},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1561430453053},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1561430453054},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1561430453234},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1561430453238},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1561430453239},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1561430453237},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1561430453240},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1561430453242},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1561430453241},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1561430453244},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1561430453250},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1561430453247},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561430453252},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561430453254},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1561430453248},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1561430453237},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1561430453257},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1561430453251},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1561430453076},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1561430453079},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1561430453253},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1561430453081},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1561430453081},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1561430453255},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1561430453084},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1561430453085},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1561430453086},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1561430453086},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1561430453257},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1561430453087},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561430453012},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561430453012},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561430453189},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561430453189},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561430453191},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561430453226},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561430453232},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1561430452986},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1561430452985},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1561430452993},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1561430452995},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1561430452997},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1561430453001},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1561430453002},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1561430453003},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1561430453007},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1561430453010},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1561430453004},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1561430453019},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1561430453020},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1561430453014},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1561430453021},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1561430453023},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1561430453024},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1561430453025},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1561430453022},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1561430453026},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1561430453029},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1561430453030},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1561430453034},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1561430453032},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1561430453035},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1561430453037},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1561430453036},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1561430453038},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1561430453038},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1561430453040},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1561430453041},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1561430453039},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1561430453042},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1561430453045},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1561430453057},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1561430453060},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1561430453063},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1561430453058},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1561430453188},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1561430453190},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1561430453186},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1561430453191},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1561430453224},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1561430453225},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1561430453260},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1561430453263},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1561430453265},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1561430453268},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1561430453269},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1561430453270},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1561430453271},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1561430453274},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1561430453229},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1561430453270},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1561430453274},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1561430453276},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1561430453321},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1561430453322},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1561430453308},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1561430453314},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1561430453357},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1561430453358},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1561430453362},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1561430453371},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1561430453372},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1561430453374},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1561430453373},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1561430453415},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1561430453359},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1561430453370},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1561430453421},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1561430453425},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1561430453422},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1561430453303},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1561430453426},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1561430453231},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1561430453438},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1561430453437},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1561430453442},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1561430453439},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1561430453441},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1561430453443},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1561430453434},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1561430453446},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1561430453450},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1561430453448},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1561430453451},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1561430453453},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1561430453424},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1561430453429},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1561430453452},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1561430453435},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1561430453455},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1561430453457},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1561430453471},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1561430453472},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1561430453457},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1561430453458},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1561430453480},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1561430453454},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1561430453476},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1561430453432},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1561430453419},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1561430453056},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1561430453057},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1561430453090},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1561430453091},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1561430453091},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1561430453092},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1561430453095},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1561430453151},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1561430453119},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1561430453179},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1561430453176},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1561430453479},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1561430453183},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1561430453182},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1561430453180},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1561430453185},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1561430453201},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1561430453184},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1561430453200},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1561430453196},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1561430453201},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1561430453203},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1561430453202},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1561430453213},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1561430453204},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1561430453205},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1561430453215},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1561430453217},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1561430453213},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1561430453219},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1561430453210},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1561430453220},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1561430453221},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1561430453222},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1561430453223},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1561430453223},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1561430453273},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1561430453324},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1561430453330},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1561430453326},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1561430453332},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1561430453334},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1561430453351},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1561430453337},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1561430453355},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1561430453366},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1561430453368},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1561430453292},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1561430453297},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1561430453380},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1561430453469},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1561430453470},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1561430453382},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1561430453354},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1561430453298},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561430453407},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1561430453295},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561430453411},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1561430453475},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1561430453378},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1561430453098},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1561430453100},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1561430453102},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1561430453104},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1561430453104},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1561430453103},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1561430453106},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1561430453106},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1561430453107},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1561430453112},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1561430453109},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1561430453138},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1561430453139},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1561430453115},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1561430453113},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1561430453116},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1561430453140},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1561430453140},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1561430453142},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1561430453147},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1561430453146},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1561430453148},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1561430453143},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1561430453120},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1561430453150},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1561430453122},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1561430453123},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1561430453121},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1561430453124},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1561430453126},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1561430453125},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1561430453131},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1561430453131},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1561430453129},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1561430453133},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1561430453134},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1561430453136},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1561430453135},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1561430453135},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1561430453155},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1561430453153},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1561430453154},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1561430453156},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1561430453154},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1561430453157},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1561430453158},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1561430453164},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1561430453162},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1561430453168},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1561430453160},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1561430453166},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1561430453167},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1561430453169},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1561430453171},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1561430453170},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1561430453172},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1561430453174},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1561430453173},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1561430453206},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1561430453284},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1561430453287},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1561430453288},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1561430453208},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1561430453290},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1561430453290},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1561430453339},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1561430453342},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1561430453344},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1561430453349},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1561430453388},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1561430453218},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1561430453340},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1561430453347},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1561430453405},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561430453391},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1561430453307},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1561430453466},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1561430453401},{"_id":"public/about/index.html","hash":"dc61914b2aad5e978b0b7082d1d57f0cc2c522f6","modified":1580803480323},{"_id":"public/categories/index.html","hash":"6d0a4af12e6276212f51de437c0f73091176b564","modified":1580803480323},{"_id":"public/tags/index.html","hash":"477c31fa05a99d36a4e5ff000a36b1ce727a5601","modified":1580803480323},{"_id":"public/archives/index.html","hash":"d0d8b9cdc05cb99e20814d1f59570c6e5b9199ba","modified":1580803480324},{"_id":"public/archives/2019/index.html","hash":"acbc1e532d037ade5f8a8a60e9e90454458e2957","modified":1580803480324},{"_id":"public/archives/2019/06/index.html","hash":"9358036d90e1000192a2240d6bcf55be0fcbe66d","modified":1580803480323},{"_id":"public/archives/2019/07/index.html","hash":"96f00fce129d2783a4148ca1ed7f33ad91bc7d5c","modified":1580803480323},{"_id":"public/categories/React/index.html","hash":"97da52a7ae3640e425a41f26ebc8c0bd9ff988e7","modified":1580803480323},{"_id":"public/tags/基础/index.html","hash":"521b15d959cab6a8ee9e97e8c278946d28a72268","modified":1580803480324},{"_id":"public/tags/Hexo/index.html","hash":"d249b84f67ae4f0b480173a7beecabf5ccaf955a","modified":1580803480324},{"_id":"public/tags/React/index.html","hash":"dd2de021b52ad71e1da8e5841bf875c41ad3cf9c","modified":1580803480324},{"_id":"public/2019/07/31/基础概念之原码与补码/index.html","hash":"dd7c7a49babec8f96843366c8fe7953731ee2bbf","modified":1580803480324},{"_id":"public/2019/07/05/kafka在docker中的安装与使用/index.html","hash":"04d4b41f3a8b7df6341ca2beac781dca8d223ce8","modified":1580803480324},{"_id":"public/2019/07/03/React-重学/index.html","hash":"d03d8009109386f187b8c7b754a17fe85f7d233d","modified":1580803480324},{"_id":"public/2019/06/26/Hexo-nexT的使用/index.html","hash":"5a173d8182bc37cba18c7fdc006cf8cd5a9bbc00","modified":1580803480324},{"_id":"public/index.html","hash":"7e22e2e50266fd47c049601a73d6e64399432415","modified":1580803480324},{"_id":"public/archives/2019/12/index.html","hash":"69106b5e89637384fbf366c4bed4027dcd8a366b","modified":1580803480323},{"_id":"public/categories/golang/index.html","hash":"ad2ed4391f97a4783a38cdd045058593aaeeef65","modified":1580803480323},{"_id":"public/tags/golang/index.html","hash":"1c063cf877538fdea66db7fc5cea78190c54d00d","modified":1580803480323},{"_id":"public/2019/12/09/golang拾遗三测试/index.html","hash":"2afb666f68ef8457cd63873b7f9de650141ebc2b","modified":1580803480324},{"_id":"public/2019/12/09/golang拾遗二多线程/index.html","hash":"62463165e79051fdf0f1e38c00a2b40a2fd17952","modified":1580803480324},{"_id":"public/2019/12/09/golang拾遗一/index.html","hash":"4652e34ac02c7a341bb8ec54261db887f9a9f0f3","modified":1580803480324},{"_id":"public/images/avatar.jpg","hash":"af9862a94c8798dd6e099cc60f7b64bbe1479c6a","modified":1580800327889},{"_id":"public/images/pasted-2.png","hash":"6c3c4d191f1137f31ce74976e0cc825e7ba78203","modified":1580800327889},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1580800327889},{"_id":"public/images/pasted-3.png","hash":"d3919a968a0fba46f968022479ae7a0099fa6d0a","modified":1580800327889},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1580800327889},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1580800327889},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1580800327889},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1580800327889},{"_id":"public/images/pasted-0.png","hash":"d9325a9639adbf6eeb0e3ea8bf0abd5936c073cd","modified":1580800327889},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1580800327889},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1580800327889},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1580800327889},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1580800327889},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1580800327889},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1580800327889},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1580800327889},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1580800327889},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1580800327889},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1580800327889},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1580800327889},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1580800327889},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1580800327889},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1580800327889},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1580800327889},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1580800327889},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1580800327889},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1580800327890},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1580800327890},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1580800328614},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1580800328616},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1580800328618},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1580800328618},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1580800328618},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1580800328618},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1580800328618},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1580800328618},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1580800328618},{"_id":"public/images/pasted-1.png","hash":"c9f5dcc9e0ded0cbdd66eea4a5f9805512b3ca12","modified":1580800328618},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1580800328621},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1580800328621},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1580800328621},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1580800328621},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1580800328621},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1580800328621},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1580800328622},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1580800328622},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1580800328622},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1580800328622},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1580800328622},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1580800328622},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1580800328622},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1580800328622},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1580800328622},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1580800328622},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1580800328622},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1580800328623},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1580800328623},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1580800328623},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1580800328623},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1580800328623},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1580800328623},{"_id":"public/lib/fastclick/README.html","hash":"c5a4c05ca80132b7e343d5fd1d1d1a976b4ad151","modified":1580800328623},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"81057e5b518b8ab60474e1ad027e868b558f15b7","modified":1580800328623},{"_id":"public/lib/jquery_lazyload/README.html","hash":"18a600ca1aafd3bf08af52b6a6fe5f056aeed9f4","modified":1580800328623},{"_id":"public/css/main.css","hash":"3edc5ae4a933deb56a96483d5af9c60c79f7fdee","modified":1580800328623},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1580800328628},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1580800328628},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1580800328630},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1580800328630},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1580800328630},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1580800328630},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1580800328630},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1580800328630},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1580800328630},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1580800328630},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1580800328630},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1580800328630},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1580800328630},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1580800328647},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1580800328647},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1580800328647},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1580800328647},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1580800328647},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1580800328656},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1580800328656},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1580800328657},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1580800328697},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1580800328697},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1580800328698},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1580800328698},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1580800328698},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1580800328698},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1580800328702},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1580800328702},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1580800328703},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1580800328705},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1580800328706},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1580800328706},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1580800328710},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1580800328719},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1580800328721},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1580800328723},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1580800328729},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1580800328731},{"_id":"source/_drafts/Untitled.md","hash":"2c19efa84688db629ea4eda9916561831482bc66","modified":1580801592920},{"_id":"source/_discarded/Untitled.md","hash":"e2dc4c4de6a4d49c833d3250e6c03b9b0956eb18","modified":1580801596737}],"Category":[{"name":"golang","_id":"ck67jp5v8000228dh2g6qojfs"},{"name":"React","_id":"ck67jp600000o28dhhiuv0ey4"}],"Data":[],"Page":[{"title":"about","date":"2019-07-07T14:25:08.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-07 22:25:08\ntype: \"about\"\n---\n","updated":"2019-07-07T14:33:09.738Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck67jp5wh000b28dhxsm8wwku","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-07T14:16:46.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-07 22:16:46\ntype: \"tags\"\n---\n","updated":"2019-07-07T14:34:40.753Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck67jp5wj000d28dhd6utg3zi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-07T14:19:10.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-07 22:19:10\ntype: \"categories\"\n---\n","updated":"2019-07-07T14:34:48.769Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck67jp5wm000g28dhe0mae5jl","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"golang拾遗一概念","author":"江小渔","date":"2019-12-09T06:36:00.000Z","_content":"概述:接口/类型断言/通道select/值类型和引用类型/类型之间的组合/指针/Error/recover/context.Context类型/unicode与字符编码/string\n<!--more-->\n# 接口\n1. 倾向于是用小的接口定义,很多接口只包含一个方法\n```\ntype Reader interface{\n    Read(p []byte) (n int, err error)\n}\ntype Writer interface{\n    Write(p []byte) (n int, err error)\n}\n```\n2. 较大的接口定义,可以由多个小接口定义组合而成\n```\ntype ReadWriter interface{\n    Reader\n    Write\n}\n```\n3. 只依赖于必要功能的最小接口\n```\nfunc StoreData(reader Reader) error{\n    -\n}\n```\n\n# 类型断言\n1. `value, ok := interface{}(container).([]string)`\n2. switch语句\n```golang\nfunc main() {\n\tcontainer := map[int]string{0: \"zero\", 1: \"one\", 2: \"two\"}\n\n\t// 方式1。\n\t_, ok1 := interface{}(container).([]string)\n\t_, ok2 := interface{}(container).(map[int]string)\n\tif !(ok1 || ok2) {\n\t\tfmt.Printf(\"Error: unsupported container type: %T\\n\", container)\n\t\treturn\n\t}\n\tfmt.Printf(\"The element is %q. (container type: %T)\\n\",\n\t\tcontainer[1], container)\n\n\t// 方式2。\n\telem, err := getElement(container)\n\tif err != nil {\n\t\tfmt.Printf(\"Error: %s\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"The element is %q. (container type: %T)\\n\",\n\t\telem, container)\n}\n\nfunc getElement(containerI interface{}) (elem string, err error) {\n\tswitch t := containerI.(type) {\n\tcase []string:\n\t\telem = t[1]\n\tcase map[int]string:\n\t\telem = t[1]\n\tdefault:\n\t\terr = fmt.Errorf(\"unsupported container type: %T\", containerI)\n\t\treturn\n\t}\n\treturn\n}\n```\n# 通道select\n```go\n// 准备好几个通道。\nintChannels := [3]chan int{\nmake(chan int, 1),\nmake(chan int, 1),\nmake(chan int, 1),\n}\n// 随机选择一个通道，并向它发送元素值。\nindex := rand.Intn(3)\nfmt.Printf(\"The index: %d\\n\", index)\nintChannels[index] <- index\n// 哪一个通道中有可取的元素值，哪个对应的分支就会被执行。\nselect {\ncase <-intChannels[0]:\nfmt.Println(\"The first candidate case is selected.\")\ncase <-intChannels[1]:\nfmt.Println(\"The second candidate case is selected.\")\ncase elem := <-intChannels[2]:\nfmt.Printf(\"The third candidate case is selected, the element is %d.\\n\", elem)\ndefault:\nfmt.Println(\"No candidate case is selected!\")\n}\n```\n- 多渠道选择\n```go\nselect {\n    case ret := <-retCh1:\n        t.Logf(\"result %s\", ret)\n    case ret := <-retCh2:\n        t.Logf(\"result %s\", ret)\n    default:\n        t.Error(\"No one returned\")\n}\n```\n- 超时控制\n```go\nselect {\n    case ret := <-retCh:\n        t.Logf(\"result %s\", ret)\n    case <-time.After(time.Second * 1:\n        t.Error(\"time out\")\n}\n```\n\n# 值类型和引用类型\n```\n1.值类型：变量直接存储值，内存通常在栈中分配。\n值类型：基本数据类型int、float、bool、string以及数组和struct\n\n2.引用类型：变量存储的是一个地址，这个地址存储最终的值。内存通常在 堆上分配。通过GC回收。\n引用类型：指针、slice、map、chan等都是引用类型。\n```\n# 类型之间的组合\n- Go 语言中根本没有继承的概念，它所做的是通过嵌入字段的方式实现了类型之间的组合\n```golang\ntype Animal struct {\nscientificName string // 学名。\n}\ntype Cat struct {\nName string // 名字\nAnimal\n}\n```\n# 指针\n1. 不可变的值不可寻址\n2. 绝大多数被视为临时结果的值都是不可寻址的\n3. 若拿到某值的指针可能会破坏程序的一致性，那么就是不安全的，该值就不可寻址\n```go\nNew(\"little pig\").SetName(\"monster\")\n//因此，上边这行链式调用会让编译器报告两个错误，一个是果，即：不能在New(\"little pig\")的结果值上调用指针方法。一个是因，即：不能取得New(\"little pig\")的地址。\n```\n- 通过unsafe.Pointer操纵可寻址的值\n```\ndog := Dog{\"little pig\"}\ndogP := &dog\ndogPtr := uintptr(unsafe.Pointer(dogP))\n//先把dogP转换成了一个unsafe.Pointer类型的值，然后紧接着又把后者转换成了一个uintptr的值，并把它赋给了变量dogPtr\n\nnamePtr := dogPtr + unsafe.Offsetof(dogP.name)\n//unsafe.Offsetof函数用于获取两个值在内存中的起始存储地址之间的偏移量，以字节为单位。\n//这两个值一个是某个字段的值，另一个是该字段值所属的那个结构体值\n\nnameP := (*string)(unsafe.Pointer(namePtr))\n\n///unsafe.Pointer+ uintptr突破私有成员访问\n```\n# Error\n- 怎样判断一个错误值具体代表的是哪一类错误？\n1. 对于类型在已知范围内的一系列错误值，一般使用类型断言表达式或类型switch语句来判断；\n2. 对于已有相应变量且类型相同的一系列错误值，一般直接使用判等操作来判断；\n3. 对于没有相应变量且类型未知的一系列错误值，只能使用其错误信息的字符串表示形式来做判断。\n\n# recover\n- Go 语言的内建函数recover专用于恢复 panic，或者说平息运行时恐慌。recover函数无需任何参数，并且会返回一个空接口类型的值。\n\n\n# context.Context类型(单章)\n- https://www.flysnow.org/2017/05/12/go-in-action-go-context.html\n- Context 使用原则\n1. 不要把Context放在结构体中，要以参数的方式传递\n2. 以Context作为参数的函数方法，应该把Context作为第一个参数，放在第一位。\n3. 给一个函数方法传递Context的时候，不要传递nil，如果不知道传递什么，就使用context.TODO\n4. Context的Value相关方法应该传递必须的数据，不要什么数据都使用这个传递\n5. Context是线程安全的，可以放心的在多个goroutine中传递\n\n# unicode与字符编码\nQ:一个string类型的值在底层是怎样被表达的？\n\nA:在底层，一个string类型的值是由一系列相对应的 Unicode 代码点的 UTF-8 编码值来表达的。\n\n# string\nstrings.Builder类型的值（以下简称Builder值）的优势有下面的三种：\n\n- 已存在的内容不可变，但可以拼接更多的内容；\n- 减少了内存分配和内容拷贝的次数；\n- 可将内容重置，可重用值。","source":"_posts/golang拾遗一.md","raw":"title: golang拾遗一概念\nauthor: 江小渔\ntags:\n  - golang\ncategories:\n  - golang\ndate: 2019-12-09 14:36:00\n---\n概述:接口/类型断言/通道select/值类型和引用类型/类型之间的组合/指针/Error/recover/context.Context类型/unicode与字符编码/string\n<!--more-->\n# 接口\n1. 倾向于是用小的接口定义,很多接口只包含一个方法\n```\ntype Reader interface{\n    Read(p []byte) (n int, err error)\n}\ntype Writer interface{\n    Write(p []byte) (n int, err error)\n}\n```\n2. 较大的接口定义,可以由多个小接口定义组合而成\n```\ntype ReadWriter interface{\n    Reader\n    Write\n}\n```\n3. 只依赖于必要功能的最小接口\n```\nfunc StoreData(reader Reader) error{\n    -\n}\n```\n\n# 类型断言\n1. `value, ok := interface{}(container).([]string)`\n2. switch语句\n```golang\nfunc main() {\n\tcontainer := map[int]string{0: \"zero\", 1: \"one\", 2: \"two\"}\n\n\t// 方式1。\n\t_, ok1 := interface{}(container).([]string)\n\t_, ok2 := interface{}(container).(map[int]string)\n\tif !(ok1 || ok2) {\n\t\tfmt.Printf(\"Error: unsupported container type: %T\\n\", container)\n\t\treturn\n\t}\n\tfmt.Printf(\"The element is %q. (container type: %T)\\n\",\n\t\tcontainer[1], container)\n\n\t// 方式2。\n\telem, err := getElement(container)\n\tif err != nil {\n\t\tfmt.Printf(\"Error: %s\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"The element is %q. (container type: %T)\\n\",\n\t\telem, container)\n}\n\nfunc getElement(containerI interface{}) (elem string, err error) {\n\tswitch t := containerI.(type) {\n\tcase []string:\n\t\telem = t[1]\n\tcase map[int]string:\n\t\telem = t[1]\n\tdefault:\n\t\terr = fmt.Errorf(\"unsupported container type: %T\", containerI)\n\t\treturn\n\t}\n\treturn\n}\n```\n# 通道select\n```go\n// 准备好几个通道。\nintChannels := [3]chan int{\nmake(chan int, 1),\nmake(chan int, 1),\nmake(chan int, 1),\n}\n// 随机选择一个通道，并向它发送元素值。\nindex := rand.Intn(3)\nfmt.Printf(\"The index: %d\\n\", index)\nintChannels[index] <- index\n// 哪一个通道中有可取的元素值，哪个对应的分支就会被执行。\nselect {\ncase <-intChannels[0]:\nfmt.Println(\"The first candidate case is selected.\")\ncase <-intChannels[1]:\nfmt.Println(\"The second candidate case is selected.\")\ncase elem := <-intChannels[2]:\nfmt.Printf(\"The third candidate case is selected, the element is %d.\\n\", elem)\ndefault:\nfmt.Println(\"No candidate case is selected!\")\n}\n```\n- 多渠道选择\n```go\nselect {\n    case ret := <-retCh1:\n        t.Logf(\"result %s\", ret)\n    case ret := <-retCh2:\n        t.Logf(\"result %s\", ret)\n    default:\n        t.Error(\"No one returned\")\n}\n```\n- 超时控制\n```go\nselect {\n    case ret := <-retCh:\n        t.Logf(\"result %s\", ret)\n    case <-time.After(time.Second * 1:\n        t.Error(\"time out\")\n}\n```\n\n# 值类型和引用类型\n```\n1.值类型：变量直接存储值，内存通常在栈中分配。\n值类型：基本数据类型int、float、bool、string以及数组和struct\n\n2.引用类型：变量存储的是一个地址，这个地址存储最终的值。内存通常在 堆上分配。通过GC回收。\n引用类型：指针、slice、map、chan等都是引用类型。\n```\n# 类型之间的组合\n- Go 语言中根本没有继承的概念，它所做的是通过嵌入字段的方式实现了类型之间的组合\n```golang\ntype Animal struct {\nscientificName string // 学名。\n}\ntype Cat struct {\nName string // 名字\nAnimal\n}\n```\n# 指针\n1. 不可变的值不可寻址\n2. 绝大多数被视为临时结果的值都是不可寻址的\n3. 若拿到某值的指针可能会破坏程序的一致性，那么就是不安全的，该值就不可寻址\n```go\nNew(\"little pig\").SetName(\"monster\")\n//因此，上边这行链式调用会让编译器报告两个错误，一个是果，即：不能在New(\"little pig\")的结果值上调用指针方法。一个是因，即：不能取得New(\"little pig\")的地址。\n```\n- 通过unsafe.Pointer操纵可寻址的值\n```\ndog := Dog{\"little pig\"}\ndogP := &dog\ndogPtr := uintptr(unsafe.Pointer(dogP))\n//先把dogP转换成了一个unsafe.Pointer类型的值，然后紧接着又把后者转换成了一个uintptr的值，并把它赋给了变量dogPtr\n\nnamePtr := dogPtr + unsafe.Offsetof(dogP.name)\n//unsafe.Offsetof函数用于获取两个值在内存中的起始存储地址之间的偏移量，以字节为单位。\n//这两个值一个是某个字段的值，另一个是该字段值所属的那个结构体值\n\nnameP := (*string)(unsafe.Pointer(namePtr))\n\n///unsafe.Pointer+ uintptr突破私有成员访问\n```\n# Error\n- 怎样判断一个错误值具体代表的是哪一类错误？\n1. 对于类型在已知范围内的一系列错误值，一般使用类型断言表达式或类型switch语句来判断；\n2. 对于已有相应变量且类型相同的一系列错误值，一般直接使用判等操作来判断；\n3. 对于没有相应变量且类型未知的一系列错误值，只能使用其错误信息的字符串表示形式来做判断。\n\n# recover\n- Go 语言的内建函数recover专用于恢复 panic，或者说平息运行时恐慌。recover函数无需任何参数，并且会返回一个空接口类型的值。\n\n\n# context.Context类型(单章)\n- https://www.flysnow.org/2017/05/12/go-in-action-go-context.html\n- Context 使用原则\n1. 不要把Context放在结构体中，要以参数的方式传递\n2. 以Context作为参数的函数方法，应该把Context作为第一个参数，放在第一位。\n3. 给一个函数方法传递Context的时候，不要传递nil，如果不知道传递什么，就使用context.TODO\n4. Context的Value相关方法应该传递必须的数据，不要什么数据都使用这个传递\n5. Context是线程安全的，可以放心的在多个goroutine中传递\n\n# unicode与字符编码\nQ:一个string类型的值在底层是怎样被表达的？\n\nA:在底层，一个string类型的值是由一系列相对应的 Unicode 代码点的 UTF-8 编码值来表达的。\n\n# string\nstrings.Builder类型的值（以下简称Builder值）的优势有下面的三种：\n\n- 已存在的内容不可变，但可以拼接更多的内容；\n- 减少了内存分配和内容拷贝的次数；\n- 可将内容重置，可重用值。","slug":"golang拾遗一","published":1,"updated":"2020-02-04T07:21:53.420Z","_id":"ck67jp5v1000028dhifffmd3s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>概述:接口/类型断言/通道select/值类型和引用类型/类型之间的组合/指针/Error/recover/context.Context类型/unicode与字符编码/string</p>\n<a id=\"more\"></a>\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><ol>\n<li><p>倾向于是用小的接口定义,很多接口只包含一个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Reader interface&#123;</span><br><span class=\"line\">    Read(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type Writer interface&#123;</span><br><span class=\"line\">    Write(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>较大的接口定义,可以由多个小接口定义组合而成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type ReadWriter interface&#123;</span><br><span class=\"line\">    Reader</span><br><span class=\"line\">    Write</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只依赖于必要功能的最小接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func StoreData(reader Reader) error&#123;</span><br><span class=\"line\">    -</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h1><ol>\n<li><code>value, ok := interface{}(container).([]string)</code></li>\n<li>switch语句<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcontainer := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>&#123;<span class=\"number\">0</span>: <span class=\"string\">\"zero\"</span>, <span class=\"number\">1</span>: <span class=\"string\">\"one\"</span>, <span class=\"number\">2</span>: <span class=\"string\">\"two\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 方式1。</span></span><br><span class=\"line\">\t_, ok1 := <span class=\"keyword\">interface</span>&#123;&#125;(container).([]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t_, ok2 := <span class=\"keyword\">interface</span>&#123;&#125;(container).(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !(ok1 || ok2) &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Error: unsupported container type: %T\\n\"</span>, container)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"The element is %q. (container type: %T)\\n\"</span>,</span><br><span class=\"line\">\t\tcontainer[<span class=\"number\">1</span>], container)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 方式2。</span></span><br><span class=\"line\">\telem, err := getElement(container)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Error: %s\\n\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"The element is %q. (container type: %T)\\n\"</span>,</span><br><span class=\"line\">\t\telem, container)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getElement</span><span class=\"params\">(containerI <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(elem <span class=\"keyword\">string</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> t := containerI.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> []<span class=\"keyword\">string</span>:</span><br><span class=\"line\">\t\telem = t[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>:</span><br><span class=\"line\">\t\telem = t[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\terr = fmt.Errorf(<span class=\"string\">\"unsupported container type: %T\"</span>, containerI)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"通道select\"><a href=\"#通道select\" class=\"headerlink\" title=\"通道select\"></a>通道select</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 准备好几个通道。</span></span><br><span class=\"line\">intChannels := [<span class=\"number\">3</span>]<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 随机选择一个通道，并向它发送元素值。</span></span><br><span class=\"line\">index := rand.Intn(<span class=\"number\">3</span>)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"The index: %d\\n\"</span>, index)</span><br><span class=\"line\">intChannels[index] &lt;- index</span><br><span class=\"line\"><span class=\"comment\">// 哪一个通道中有可取的元素值，哪个对应的分支就会被执行。</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-intChannels[<span class=\"number\">0</span>]:</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"The first candidate case is selected.\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-intChannels[<span class=\"number\">1</span>]:</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"The second candidate case is selected.\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> elem := &lt;-intChannels[<span class=\"number\">2</span>]:</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"The third candidate case is selected, the element is %d.\\n\"</span>, elem)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"No candidate case is selected!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>多渠道选择</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ret := &lt;-retCh1:</span><br><span class=\"line\">        t.Logf(<span class=\"string\">\"result %s\"</span>, ret)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ret := &lt;-retCh2:</span><br><span class=\"line\">        t.Logf(<span class=\"string\">\"result %s\"</span>, ret)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        t.Error(<span class=\"string\">\"No one returned\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>超时控制</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ret := &lt;-retCh:</span><br><span class=\"line\">        t.Logf(<span class=\"string\">\"result %s\"</span>, ret)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-time.After(time.Second * <span class=\"number\">1</span>:</span><br><span class=\"line\">        t.Error(<span class=\"string\">\"time out\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"值类型和引用类型\"><a href=\"#值类型和引用类型\" class=\"headerlink\" title=\"值类型和引用类型\"></a>值类型和引用类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.值类型：变量直接存储值，内存通常在栈中分配。</span><br><span class=\"line\">值类型：基本数据类型int、float、bool、string以及数组和struct</span><br><span class=\"line\"></span><br><span class=\"line\">2.引用类型：变量存储的是一个地址，这个地址存储最终的值。内存通常在 堆上分配。通过GC回收。</span><br><span class=\"line\">引用类型：指针、slice、map、chan等都是引用类型。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类型之间的组合\"><a href=\"#类型之间的组合\" class=\"headerlink\" title=\"类型之间的组合\"></a>类型之间的组合</h1><ul>\n<li>Go 语言中根本没有继承的概念，它所做的是通过嵌入字段的方式实现了类型之间的组合<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">scientificName <span class=\"keyword\">string</span> <span class=\"comment\">// 学名。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">Name <span class=\"keyword\">string</span> <span class=\"comment\">// 名字</span></span><br><span class=\"line\">Animal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h1><ol>\n<li>不可变的值不可寻址</li>\n<li>绝大多数被视为临时结果的值都是不可寻址的</li>\n<li>若拿到某值的指针可能会破坏程序的一致性，那么就是不安全的，该值就不可寻址<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New(<span class=\"string\">\"little pig\"</span>).SetName(<span class=\"string\">\"monster\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//因此，上边这行链式调用会让编译器报告两个错误，一个是果，即：不能在New(\"little pig\")的结果值上调用指针方法。一个是因，即：不能取得New(\"little pig\")的地址。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>通过unsafe.Pointer操纵可寻址的值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dog := Dog&#123;&quot;little pig&quot;&#125;</span><br><span class=\"line\">dogP := &amp;dog</span><br><span class=\"line\">dogPtr := uintptr(unsafe.Pointer(dogP))</span><br><span class=\"line\">//先把dogP转换成了一个unsafe.Pointer类型的值，然后紧接着又把后者转换成了一个uintptr的值，并把它赋给了变量dogPtr</span><br><span class=\"line\"></span><br><span class=\"line\">namePtr := dogPtr + unsafe.Offsetof(dogP.name)</span><br><span class=\"line\">//unsafe.Offsetof函数用于获取两个值在内存中的起始存储地址之间的偏移量，以字节为单位。</span><br><span class=\"line\">//这两个值一个是某个字段的值，另一个是该字段值所属的那个结构体值</span><br><span class=\"line\"></span><br><span class=\"line\">nameP := (*string)(unsafe.Pointer(namePtr))</span><br><span class=\"line\"></span><br><span class=\"line\">///unsafe.Pointer+ uintptr突破私有成员访问</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h1><ul>\n<li>怎样判断一个错误值具体代表的是哪一类错误？</li>\n</ul>\n<ol>\n<li>对于类型在已知范围内的一系列错误值，一般使用类型断言表达式或类型switch语句来判断；</li>\n<li>对于已有相应变量且类型相同的一系列错误值，一般直接使用判等操作来判断；</li>\n<li>对于没有相应变量且类型未知的一系列错误值，只能使用其错误信息的字符串表示形式来做判断。</li>\n</ol>\n<h1 id=\"recover\"><a href=\"#recover\" class=\"headerlink\" title=\"recover\"></a>recover</h1><ul>\n<li>Go 语言的内建函数recover专用于恢复 panic，或者说平息运行时恐慌。recover函数无需任何参数，并且会返回一个空接口类型的值。</li>\n</ul>\n<h1 id=\"context-Context类型-单章\"><a href=\"#context-Context类型-单章\" class=\"headerlink\" title=\"context.Context类型(单章)\"></a>context.Context类型(单章)</h1><ul>\n<li><a href=\"https://www.flysnow.org/2017/05/12/go-in-action-go-context.html\" target=\"_blank\" rel=\"noopener\">https://www.flysnow.org/2017/05/12/go-in-action-go-context.html</a></li>\n<li>Context 使用原则</li>\n</ul>\n<ol>\n<li>不要把Context放在结构体中，要以参数的方式传递</li>\n<li>以Context作为参数的函数方法，应该把Context作为第一个参数，放在第一位。</li>\n<li>给一个函数方法传递Context的时候，不要传递nil，如果不知道传递什么，就使用context.TODO</li>\n<li>Context的Value相关方法应该传递必须的数据，不要什么数据都使用这个传递</li>\n<li>Context是线程安全的，可以放心的在多个goroutine中传递</li>\n</ol>\n<h1 id=\"unicode与字符编码\"><a href=\"#unicode与字符编码\" class=\"headerlink\" title=\"unicode与字符编码\"></a>unicode与字符编码</h1><p>Q:一个string类型的值在底层是怎样被表达的？</p>\n<p>A:在底层，一个string类型的值是由一系列相对应的 Unicode 代码点的 UTF-8 编码值来表达的。</p>\n<h1 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h1><p>strings.Builder类型的值（以下简称Builder值）的优势有下面的三种：</p>\n<ul>\n<li>已存在的内容不可变，但可以拼接更多的内容；</li>\n<li>减少了内存分配和内容拷贝的次数；</li>\n<li>可将内容重置，可重用值。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>概述:接口/类型断言/通道select/值类型和引用类型/类型之间的组合/指针/Error/recover/context.Context类型/unicode与字符编码/string</p>","more":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><ol>\n<li><p>倾向于是用小的接口定义,很多接口只包含一个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Reader interface&#123;</span><br><span class=\"line\">    Read(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type Writer interface&#123;</span><br><span class=\"line\">    Write(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>较大的接口定义,可以由多个小接口定义组合而成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type ReadWriter interface&#123;</span><br><span class=\"line\">    Reader</span><br><span class=\"line\">    Write</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只依赖于必要功能的最小接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func StoreData(reader Reader) error&#123;</span><br><span class=\"line\">    -</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h1><ol>\n<li><code>value, ok := interface{}(container).([]string)</code></li>\n<li>switch语句<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcontainer := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>&#123;<span class=\"number\">0</span>: <span class=\"string\">\"zero\"</span>, <span class=\"number\">1</span>: <span class=\"string\">\"one\"</span>, <span class=\"number\">2</span>: <span class=\"string\">\"two\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 方式1。</span></span><br><span class=\"line\">\t_, ok1 := <span class=\"keyword\">interface</span>&#123;&#125;(container).([]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t_, ok2 := <span class=\"keyword\">interface</span>&#123;&#125;(container).(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !(ok1 || ok2) &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Error: unsupported container type: %T\\n\"</span>, container)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"The element is %q. (container type: %T)\\n\"</span>,</span><br><span class=\"line\">\t\tcontainer[<span class=\"number\">1</span>], container)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 方式2。</span></span><br><span class=\"line\">\telem, err := getElement(container)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Error: %s\\n\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"The element is %q. (container type: %T)\\n\"</span>,</span><br><span class=\"line\">\t\telem, container)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getElement</span><span class=\"params\">(containerI <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(elem <span class=\"keyword\">string</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> t := containerI.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> []<span class=\"keyword\">string</span>:</span><br><span class=\"line\">\t\telem = t[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>:</span><br><span class=\"line\">\t\telem = t[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\terr = fmt.Errorf(<span class=\"string\">\"unsupported container type: %T\"</span>, containerI)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"通道select\"><a href=\"#通道select\" class=\"headerlink\" title=\"通道select\"></a>通道select</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 准备好几个通道。</span></span><br><span class=\"line\">intChannels := [<span class=\"number\">3</span>]<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 随机选择一个通道，并向它发送元素值。</span></span><br><span class=\"line\">index := rand.Intn(<span class=\"number\">3</span>)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"The index: %d\\n\"</span>, index)</span><br><span class=\"line\">intChannels[index] &lt;- index</span><br><span class=\"line\"><span class=\"comment\">// 哪一个通道中有可取的元素值，哪个对应的分支就会被执行。</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-intChannels[<span class=\"number\">0</span>]:</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"The first candidate case is selected.\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> &lt;-intChannels[<span class=\"number\">1</span>]:</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"The second candidate case is selected.\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> elem := &lt;-intChannels[<span class=\"number\">2</span>]:</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"The third candidate case is selected, the element is %d.\\n\"</span>, elem)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"No candidate case is selected!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>多渠道选择</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ret := &lt;-retCh1:</span><br><span class=\"line\">        t.Logf(<span class=\"string\">\"result %s\"</span>, ret)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ret := &lt;-retCh2:</span><br><span class=\"line\">        t.Logf(<span class=\"string\">\"result %s\"</span>, ret)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        t.Error(<span class=\"string\">\"No one returned\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>超时控制</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ret := &lt;-retCh:</span><br><span class=\"line\">        t.Logf(<span class=\"string\">\"result %s\"</span>, ret)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-time.After(time.Second * <span class=\"number\">1</span>:</span><br><span class=\"line\">        t.Error(<span class=\"string\">\"time out\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"值类型和引用类型\"><a href=\"#值类型和引用类型\" class=\"headerlink\" title=\"值类型和引用类型\"></a>值类型和引用类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.值类型：变量直接存储值，内存通常在栈中分配。</span><br><span class=\"line\">值类型：基本数据类型int、float、bool、string以及数组和struct</span><br><span class=\"line\"></span><br><span class=\"line\">2.引用类型：变量存储的是一个地址，这个地址存储最终的值。内存通常在 堆上分配。通过GC回收。</span><br><span class=\"line\">引用类型：指针、slice、map、chan等都是引用类型。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类型之间的组合\"><a href=\"#类型之间的组合\" class=\"headerlink\" title=\"类型之间的组合\"></a>类型之间的组合</h1><ul>\n<li>Go 语言中根本没有继承的概念，它所做的是通过嵌入字段的方式实现了类型之间的组合<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">scientificName <span class=\"keyword\">string</span> <span class=\"comment\">// 学名。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">Name <span class=\"keyword\">string</span> <span class=\"comment\">// 名字</span></span><br><span class=\"line\">Animal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h1><ol>\n<li>不可变的值不可寻址</li>\n<li>绝大多数被视为临时结果的值都是不可寻址的</li>\n<li>若拿到某值的指针可能会破坏程序的一致性，那么就是不安全的，该值就不可寻址<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New(<span class=\"string\">\"little pig\"</span>).SetName(<span class=\"string\">\"monster\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//因此，上边这行链式调用会让编译器报告两个错误，一个是果，即：不能在New(\"little pig\")的结果值上调用指针方法。一个是因，即：不能取得New(\"little pig\")的地址。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>通过unsafe.Pointer操纵可寻址的值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dog := Dog&#123;&quot;little pig&quot;&#125;</span><br><span class=\"line\">dogP := &amp;dog</span><br><span class=\"line\">dogPtr := uintptr(unsafe.Pointer(dogP))</span><br><span class=\"line\">//先把dogP转换成了一个unsafe.Pointer类型的值，然后紧接着又把后者转换成了一个uintptr的值，并把它赋给了变量dogPtr</span><br><span class=\"line\"></span><br><span class=\"line\">namePtr := dogPtr + unsafe.Offsetof(dogP.name)</span><br><span class=\"line\">//unsafe.Offsetof函数用于获取两个值在内存中的起始存储地址之间的偏移量，以字节为单位。</span><br><span class=\"line\">//这两个值一个是某个字段的值，另一个是该字段值所属的那个结构体值</span><br><span class=\"line\"></span><br><span class=\"line\">nameP := (*string)(unsafe.Pointer(namePtr))</span><br><span class=\"line\"></span><br><span class=\"line\">///unsafe.Pointer+ uintptr突破私有成员访问</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h1><ul>\n<li>怎样判断一个错误值具体代表的是哪一类错误？</li>\n</ul>\n<ol>\n<li>对于类型在已知范围内的一系列错误值，一般使用类型断言表达式或类型switch语句来判断；</li>\n<li>对于已有相应变量且类型相同的一系列错误值，一般直接使用判等操作来判断；</li>\n<li>对于没有相应变量且类型未知的一系列错误值，只能使用其错误信息的字符串表示形式来做判断。</li>\n</ol>\n<h1 id=\"recover\"><a href=\"#recover\" class=\"headerlink\" title=\"recover\"></a>recover</h1><ul>\n<li>Go 语言的内建函数recover专用于恢复 panic，或者说平息运行时恐慌。recover函数无需任何参数，并且会返回一个空接口类型的值。</li>\n</ul>\n<h1 id=\"context-Context类型-单章\"><a href=\"#context-Context类型-单章\" class=\"headerlink\" title=\"context.Context类型(单章)\"></a>context.Context类型(单章)</h1><ul>\n<li><a href=\"https://www.flysnow.org/2017/05/12/go-in-action-go-context.html\" target=\"_blank\" rel=\"noopener\">https://www.flysnow.org/2017/05/12/go-in-action-go-context.html</a></li>\n<li>Context 使用原则</li>\n</ul>\n<ol>\n<li>不要把Context放在结构体中，要以参数的方式传递</li>\n<li>以Context作为参数的函数方法，应该把Context作为第一个参数，放在第一位。</li>\n<li>给一个函数方法传递Context的时候，不要传递nil，如果不知道传递什么，就使用context.TODO</li>\n<li>Context的Value相关方法应该传递必须的数据，不要什么数据都使用这个传递</li>\n<li>Context是线程安全的，可以放心的在多个goroutine中传递</li>\n</ol>\n<h1 id=\"unicode与字符编码\"><a href=\"#unicode与字符编码\" class=\"headerlink\" title=\"unicode与字符编码\"></a>unicode与字符编码</h1><p>Q:一个string类型的值在底层是怎样被表达的？</p>\n<p>A:在底层，一个string类型的值是由一系列相对应的 Unicode 代码点的 UTF-8 编码值来表达的。</p>\n<h1 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h1><p>strings.Builder类型的值（以下简称Builder值）的优势有下面的三种：</p>\n<ul>\n<li>已存在的内容不可变，但可以拼接更多的内容；</li>\n<li>减少了内存分配和内容拷贝的次数；</li>\n<li>可将内容重置，可重用值。</li>\n</ul>"},{"title":"golang拾遗三测试","author":"江小渔","date":"2019-12-09T06:38:00.000Z","_content":"# 测试\n<!--more-->\n1. 对于功能测试函数来说，其名称必须以Test为前缀，并且参数列表中只应有一个*testing.T类型的参数声明。\n2. 对于性能测试函数来说，其名称必须以Benchmark为前缀，并且唯一参数的类型必须是*testing.B类型的。\n3. 对于示例测试函数来说，其名称必须以Example为前缀，但对函数的参数列表没有强制规定。\n## 命令与参数\n- go test\n- go test \n- go clean -cache(手动删除所有的缓存数据)\n- go clean -testcache(删除所有的测试结果缓存)\n- go test -bench=. -run=^$ -cpu 2,4 -count 2 (性能测试)\n```\n-bench=.，只有有了这个标记，命令才会进行性能测试。该标记的值.表明需要执行任意名称的性能测试函数\n\n-run=^$，这个标记用于表明需要执行哪些功能测试函数，这同样也是以函数名称为依据的。该标记的值^$意味着：只执行名称为空的功能测试函数，换句话说，不执行任何功能测试函数\n\n-cpu的值应该是一个正整数的列表，该列表的表现形式为：以英文半角逗号分隔的多个整数字面量，比如1,2,4\n以1,2,4为例，go test命令会先以1,2,4为最大 P 数量分别去执行第一个测试函数，之后再用同样的方式执行第二个测试函数，以此类推。\n\n-count标记是专门用于重复执行测试函数的。它的值必须大于或等于0，并且默认值为1。\n如果我们在运行go test命令的时候追加了-count 5，那么对于每一个测试函数，命令都会在预设的不同条件下（比如不同的最大 P 数量下）分别重复执行五次。\n```\ngo test命令的一次运行过程中的执行次数，即：\n```\n性能测试函数的执行次数 = `-cpu`标记的值中正整数的个数 x `-count`标记的值 x 探索式执行中测试函数的实际执行次数\n功能测试函数的执行次数 = `-cpu`标记的值中正整数的个数 x `-count`标记的值\n```\n- -parallel标记\n``` \n在运行go test命令的时候，可以追加标记-parallel，该标记的作用是：设置同一个被测代码包中的功能测试函数的最大并发执行数。该标记的默认值是测试运行时的最大 P 数量（这可以通过调用表达式runtime.GOMAXPROCS(0)获得）\n```\n- testing.B类型有这么几个指针方法：StartTimer、StopTimer和ResetTimer\n```\n通过对b.StartTimer和b.StopTimer方法的联合运用，再去除掉任何一段代码的执行时间\nb.ResetTimer方法的灵活性就要差一些了，它只能用于：去除在调用它之前那些代码的执行时间。不过，无论在调用它的时候，计时器是不是正在运行，它都可以起作用。\n```\n- t.Log/t.Logf\n```\nt.Log方法以及t.Logf方法的作用，就是打印常规的测试日志，只不过当测试成功的时候，go test命令就不会打印这类日志了。如果你想在测试结果中看到所有的常规测试日志，那么可以在运行go test命令的时候加入标记-v。\n```\n- t.Fail()/t.FailNow()失败/立即失败\n```\n调用t.Fail方法时，虽然当前的测试函数会继续执行下去，但是结果会显示该测试失败。\nt.FailNow()执行之后，当前函数会立即终止执行。换句话说，该行代码之后的所有代码都会失去执行机会。\n```\n- t.Error/t.Errorf\n```\n前者相当于t.Log方法和t.Fail方法的连续调用，而后者也与之类似，只不过它相当于先调用了t.Logf方法。\n```\n- 代码覆盖率\n```go\ngo test -v -cover\n```\n- 断言\n\t- github.com/stretchr/testify","source":"_posts/golang拾遗三测试.md","raw":"title: golang拾遗三测试\nauthor: 江小渔\ntags:\n  - golang\ncategories:\n  - golang\n  - ''\ndate: 2019-12-09 14:38:00\n---\n# 测试\n<!--more-->\n1. 对于功能测试函数来说，其名称必须以Test为前缀，并且参数列表中只应有一个*testing.T类型的参数声明。\n2. 对于性能测试函数来说，其名称必须以Benchmark为前缀，并且唯一参数的类型必须是*testing.B类型的。\n3. 对于示例测试函数来说，其名称必须以Example为前缀，但对函数的参数列表没有强制规定。\n## 命令与参数\n- go test\n- go test \n- go clean -cache(手动删除所有的缓存数据)\n- go clean -testcache(删除所有的测试结果缓存)\n- go test -bench=. -run=^$ -cpu 2,4 -count 2 (性能测试)\n```\n-bench=.，只有有了这个标记，命令才会进行性能测试。该标记的值.表明需要执行任意名称的性能测试函数\n\n-run=^$，这个标记用于表明需要执行哪些功能测试函数，这同样也是以函数名称为依据的。该标记的值^$意味着：只执行名称为空的功能测试函数，换句话说，不执行任何功能测试函数\n\n-cpu的值应该是一个正整数的列表，该列表的表现形式为：以英文半角逗号分隔的多个整数字面量，比如1,2,4\n以1,2,4为例，go test命令会先以1,2,4为最大 P 数量分别去执行第一个测试函数，之后再用同样的方式执行第二个测试函数，以此类推。\n\n-count标记是专门用于重复执行测试函数的。它的值必须大于或等于0，并且默认值为1。\n如果我们在运行go test命令的时候追加了-count 5，那么对于每一个测试函数，命令都会在预设的不同条件下（比如不同的最大 P 数量下）分别重复执行五次。\n```\ngo test命令的一次运行过程中的执行次数，即：\n```\n性能测试函数的执行次数 = `-cpu`标记的值中正整数的个数 x `-count`标记的值 x 探索式执行中测试函数的实际执行次数\n功能测试函数的执行次数 = `-cpu`标记的值中正整数的个数 x `-count`标记的值\n```\n- -parallel标记\n``` \n在运行go test命令的时候，可以追加标记-parallel，该标记的作用是：设置同一个被测代码包中的功能测试函数的最大并发执行数。该标记的默认值是测试运行时的最大 P 数量（这可以通过调用表达式runtime.GOMAXPROCS(0)获得）\n```\n- testing.B类型有这么几个指针方法：StartTimer、StopTimer和ResetTimer\n```\n通过对b.StartTimer和b.StopTimer方法的联合运用，再去除掉任何一段代码的执行时间\nb.ResetTimer方法的灵活性就要差一些了，它只能用于：去除在调用它之前那些代码的执行时间。不过，无论在调用它的时候，计时器是不是正在运行，它都可以起作用。\n```\n- t.Log/t.Logf\n```\nt.Log方法以及t.Logf方法的作用，就是打印常规的测试日志，只不过当测试成功的时候，go test命令就不会打印这类日志了。如果你想在测试结果中看到所有的常规测试日志，那么可以在运行go test命令的时候加入标记-v。\n```\n- t.Fail()/t.FailNow()失败/立即失败\n```\n调用t.Fail方法时，虽然当前的测试函数会继续执行下去，但是结果会显示该测试失败。\nt.FailNow()执行之后，当前函数会立即终止执行。换句话说，该行代码之后的所有代码都会失去执行机会。\n```\n- t.Error/t.Errorf\n```\n前者相当于t.Log方法和t.Fail方法的连续调用，而后者也与之类似，只不过它相当于先调用了t.Logf方法。\n```\n- 代码覆盖率\n```go\ngo test -v -cover\n```\n- 断言\n\t- github.com/stretchr/testify","slug":"golang拾遗三测试","published":1,"updated":"2020-02-04T07:26:25.757Z","_id":"ck67jp5v6000128dhcwqwmbrr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><a id=\"more\"></a>\n<ol>\n<li>对于功能测试函数来说，其名称必须以Test为前缀，并且参数列表中只应有一个*testing.T类型的参数声明。</li>\n<li>对于性能测试函数来说，其名称必须以Benchmark为前缀，并且唯一参数的类型必须是*testing.B类型的。</li>\n<li>对于示例测试函数来说，其名称必须以Example为前缀，但对函数的参数列表没有强制规定。<h2 id=\"命令与参数\"><a href=\"#命令与参数\" class=\"headerlink\" title=\"命令与参数\"></a>命令与参数</h2></li>\n</ol>\n<ul>\n<li>go test</li>\n<li>go test </li>\n<li>go clean -cache(手动删除所有的缓存数据)</li>\n<li>go clean -testcache(删除所有的测试结果缓存)</li>\n<li>go test -bench=. -run=^$ -cpu 2,4 -count 2 (性能测试)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-bench=.，只有有了这个标记，命令才会进行性能测试。该标记的值.表明需要执行任意名称的性能测试函数</span><br><span class=\"line\"></span><br><span class=\"line\">-run=^$，这个标记用于表明需要执行哪些功能测试函数，这同样也是以函数名称为依据的。该标记的值^$意味着：只执行名称为空的功能测试函数，换句话说，不执行任何功能测试函数</span><br><span class=\"line\"></span><br><span class=\"line\">-cpu的值应该是一个正整数的列表，该列表的表现形式为：以英文半角逗号分隔的多个整数字面量，比如1,2,4</span><br><span class=\"line\">以1,2,4为例，go test命令会先以1,2,4为最大 P 数量分别去执行第一个测试函数，之后再用同样的方式执行第二个测试函数，以此类推。</span><br><span class=\"line\"></span><br><span class=\"line\">-count标记是专门用于重复执行测试函数的。它的值必须大于或等于0，并且默认值为1。</span><br><span class=\"line\">如果我们在运行go test命令的时候追加了-count 5，那么对于每一个测试函数，命令都会在预设的不同条件下（比如不同的最大 P 数量下）分别重复执行五次。</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>go test命令的一次运行过程中的执行次数，即：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">性能测试函数的执行次数 = `-cpu`标记的值中正整数的个数 x `-count`标记的值 x 探索式执行中测试函数的实际执行次数</span><br><span class=\"line\">功能测试函数的执行次数 = `-cpu`标记的值中正整数的个数 x `-count`标记的值</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-parallel标记</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在运行go test命令的时候，可以追加标记-parallel，该标记的作用是：设置同一个被测代码包中的功能测试函数的最大并发执行数。该标记的默认值是测试运行时的最大 P 数量（这可以通过调用表达式runtime.GOMAXPROCS(0)获得）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>testing.B类型有这么几个指针方法：StartTimer、StopTimer和ResetTimer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过对b.StartTimer和b.StopTimer方法的联合运用，再去除掉任何一段代码的执行时间</span><br><span class=\"line\">b.ResetTimer方法的灵活性就要差一些了，它只能用于：去除在调用它之前那些代码的执行时间。不过，无论在调用它的时候，计时器是不是正在运行，它都可以起作用。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>t.Log/t.Logf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t.Log方法以及t.Logf方法的作用，就是打印常规的测试日志，只不过当测试成功的时候，go test命令就不会打印这类日志了。如果你想在测试结果中看到所有的常规测试日志，那么可以在运行go test命令的时候加入标记-v。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>t.Fail()/t.FailNow()失败/立即失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用t.Fail方法时，虽然当前的测试函数会继续执行下去，但是结果会显示该测试失败。</span><br><span class=\"line\">t.FailNow()执行之后，当前函数会立即终止执行。换句话说，该行代码之后的所有代码都会失去执行机会。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>t.Error/t.Errorf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前者相当于t.Log方法和t.Fail方法的连续调用，而后者也与之类似，只不过它相当于先调用了t.Logf方法。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码覆盖率</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> test -v -cover</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>断言</p>\n<ul>\n<li>github.com/stretchr/testify</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1>","more":"<ol>\n<li>对于功能测试函数来说，其名称必须以Test为前缀，并且参数列表中只应有一个*testing.T类型的参数声明。</li>\n<li>对于性能测试函数来说，其名称必须以Benchmark为前缀，并且唯一参数的类型必须是*testing.B类型的。</li>\n<li>对于示例测试函数来说，其名称必须以Example为前缀，但对函数的参数列表没有强制规定。<h2 id=\"命令与参数\"><a href=\"#命令与参数\" class=\"headerlink\" title=\"命令与参数\"></a>命令与参数</h2></li>\n</ol>\n<ul>\n<li>go test</li>\n<li>go test </li>\n<li>go clean -cache(手动删除所有的缓存数据)</li>\n<li>go clean -testcache(删除所有的测试结果缓存)</li>\n<li>go test -bench=. -run=^$ -cpu 2,4 -count 2 (性能测试)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-bench=.，只有有了这个标记，命令才会进行性能测试。该标记的值.表明需要执行任意名称的性能测试函数</span><br><span class=\"line\"></span><br><span class=\"line\">-run=^$，这个标记用于表明需要执行哪些功能测试函数，这同样也是以函数名称为依据的。该标记的值^$意味着：只执行名称为空的功能测试函数，换句话说，不执行任何功能测试函数</span><br><span class=\"line\"></span><br><span class=\"line\">-cpu的值应该是一个正整数的列表，该列表的表现形式为：以英文半角逗号分隔的多个整数字面量，比如1,2,4</span><br><span class=\"line\">以1,2,4为例，go test命令会先以1,2,4为最大 P 数量分别去执行第一个测试函数，之后再用同样的方式执行第二个测试函数，以此类推。</span><br><span class=\"line\"></span><br><span class=\"line\">-count标记是专门用于重复执行测试函数的。它的值必须大于或等于0，并且默认值为1。</span><br><span class=\"line\">如果我们在运行go test命令的时候追加了-count 5，那么对于每一个测试函数，命令都会在预设的不同条件下（比如不同的最大 P 数量下）分别重复执行五次。</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>go test命令的一次运行过程中的执行次数，即：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">性能测试函数的执行次数 = `-cpu`标记的值中正整数的个数 x `-count`标记的值 x 探索式执行中测试函数的实际执行次数</span><br><span class=\"line\">功能测试函数的执行次数 = `-cpu`标记的值中正整数的个数 x `-count`标记的值</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-parallel标记</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在运行go test命令的时候，可以追加标记-parallel，该标记的作用是：设置同一个被测代码包中的功能测试函数的最大并发执行数。该标记的默认值是测试运行时的最大 P 数量（这可以通过调用表达式runtime.GOMAXPROCS(0)获得）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>testing.B类型有这么几个指针方法：StartTimer、StopTimer和ResetTimer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过对b.StartTimer和b.StopTimer方法的联合运用，再去除掉任何一段代码的执行时间</span><br><span class=\"line\">b.ResetTimer方法的灵活性就要差一些了，它只能用于：去除在调用它之前那些代码的执行时间。不过，无论在调用它的时候，计时器是不是正在运行，它都可以起作用。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>t.Log/t.Logf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t.Log方法以及t.Logf方法的作用，就是打印常规的测试日志，只不过当测试成功的时候，go test命令就不会打印这类日志了。如果你想在测试结果中看到所有的常规测试日志，那么可以在运行go test命令的时候加入标记-v。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>t.Fail()/t.FailNow()失败/立即失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用t.Fail方法时，虽然当前的测试函数会继续执行下去，但是结果会显示该测试失败。</span><br><span class=\"line\">t.FailNow()执行之后，当前函数会立即终止执行。换句话说，该行代码之后的所有代码都会失去执行机会。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>t.Error/t.Errorf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前者相当于t.Log方法和t.Fail方法的连续调用，而后者也与之类似，只不过它相当于先调用了t.Logf方法。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码覆盖率</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> test -v -cover</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>断言</p>\n<ul>\n<li>github.com/stretchr/testify</li>\n</ul>\n</li>\n</ul>"},{"title":"基础概念之原码与补码","author":"江小渔","date":"2019-07-31T10:21:00.000Z","_content":"概述:无\n<!--more-->\n# 二进制原码：\n- 最高位为符号位，最高位为0时表示正数，为1时表示负数，如：\n```\n1111 1111 = -127 ; 0111 1111 = 127\n```\n\n- 此时称为原码(true form)，但原码不能直接参与运算，如：\n```\n1000 0001 = -1\n0000 0001 = 1\n-1 + 1 = 1000 0001 + 0000 0001 = 1000 0010 = -2 \n```\n- 这显然是错误的，此外可以发现原码中有两种0： \n```\n0000 0000 = +0 ; 1000 0000 = -0\n```\n- 因此计算机中采用补码(complement)来表示有符号整数。\n---\n# 补码的定义：\n- 对于正整数来说，原码即补码；\n- 对于负整数来说，其补码与其绝对值的原码相加，和为模（2^n）；\n- 补码中0的表示方法只有一种：`0000 0000`；\n- 强制规定原码的-0（仅最高位为1，其他位全为0）的值为最小的负数，即−2^(n−1)。如byte型数据中，1000 0000 = -128（−2^7）；\n- 补码再求补码，等于该整数本身；\n---\n# 补码的计算：\n- 对于正整数，原码即补码；\n- 对于负整数，补码的求法为取其绝对值的二进制，按位取反后+1，即求得其补码。如以byte型数据为例，求-7的补码： \n  - 先取得7的二进制：0000 0111 = 7\n  - 按位取反： 1111 1000\n  - 再加1：1111 1001 即为-7的补码\n\n# 口诀\n- 正数的原码、反码、补码都相同\n- 负数的反码是原码符号位不变，剩余位按位取反\n- 负数的补码是反码+1\n- 而移码呢，无论正负数，都是在补码的基础上符号位取反","source":"_posts/基础概念之原码与补码.md","raw":"title: 基础概念之原码与补码\nauthor: 江小渔\ntags:\n  - 基础\n  - ''\ncategories: []\ndate: 2019-07-31 18:21:00\n---\n概述:无\n<!--more-->\n# 二进制原码：\n- 最高位为符号位，最高位为0时表示正数，为1时表示负数，如：\n```\n1111 1111 = -127 ; 0111 1111 = 127\n```\n\n- 此时称为原码(true form)，但原码不能直接参与运算，如：\n```\n1000 0001 = -1\n0000 0001 = 1\n-1 + 1 = 1000 0001 + 0000 0001 = 1000 0010 = -2 \n```\n- 这显然是错误的，此外可以发现原码中有两种0： \n```\n0000 0000 = +0 ; 1000 0000 = -0\n```\n- 因此计算机中采用补码(complement)来表示有符号整数。\n---\n# 补码的定义：\n- 对于正整数来说，原码即补码；\n- 对于负整数来说，其补码与其绝对值的原码相加，和为模（2^n）；\n- 补码中0的表示方法只有一种：`0000 0000`；\n- 强制规定原码的-0（仅最高位为1，其他位全为0）的值为最小的负数，即−2^(n−1)。如byte型数据中，1000 0000 = -128（−2^7）；\n- 补码再求补码，等于该整数本身；\n---\n# 补码的计算：\n- 对于正整数，原码即补码；\n- 对于负整数，补码的求法为取其绝对值的二进制，按位取反后+1，即求得其补码。如以byte型数据为例，求-7的补码： \n  - 先取得7的二进制：0000 0111 = 7\n  - 按位取反： 1111 1000\n  - 再加1：1111 1001 即为-7的补码\n\n# 口诀\n- 正数的原码、反码、补码都相同\n- 负数的反码是原码符号位不变，剩余位按位取反\n- 负数的补码是反码+1\n- 而移码呢，无论正负数，都是在补码的基础上符号位取反","slug":"基础概念之原码与补码","published":1,"updated":"2020-02-04T07:25:40.362Z","_id":"ck67jp5wg000a28dhhrnsht9r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>概述:无</p>\n<a id=\"more\"></a>\n<h1 id=\"二进制原码：\"><a href=\"#二进制原码：\" class=\"headerlink\" title=\"二进制原码：\"></a>二进制原码：</h1><ul>\n<li><p>最高位为符号位，最高位为0时表示正数，为1时表示负数，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1111 1111 = -127 ; 0111 1111 = 127</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此时称为原码(true form)，但原码不能直接参与运算，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000 0001 = -1</span><br><span class=\"line\">0000 0001 = 1</span><br><span class=\"line\">-1 + 1 = 1000 0001 + 0000 0001 = 1000 0010 = -2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这显然是错误的，此外可以发现原码中有两种0： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000 0000 = +0 ; 1000 0000 = -0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>因此计算机中采用补码(complement)来表示有符号整数。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"补码的定义：\"><a href=\"#补码的定义：\" class=\"headerlink\" title=\"补码的定义：\"></a>补码的定义：</h1><ul>\n<li>对于正整数来说，原码即补码；</li>\n<li>对于负整数来说，其补码与其绝对值的原码相加，和为模（2^n）；</li>\n<li>补码中0的表示方法只有一种：<code>0000 0000</code>；</li>\n<li>强制规定原码的-0（仅最高位为1，其他位全为0）的值为最小的负数，即−2^(n−1)。如byte型数据中，1000 0000 = -128（−2^7）；</li>\n<li>补码再求补码，等于该整数本身；</li>\n</ul>\n<hr>\n<h1 id=\"补码的计算：\"><a href=\"#补码的计算：\" class=\"headerlink\" title=\"补码的计算：\"></a>补码的计算：</h1><ul>\n<li>对于正整数，原码即补码；</li>\n<li>对于负整数，补码的求法为取其绝对值的二进制，按位取反后+1，即求得其补码。如以byte型数据为例，求-7的补码： <ul>\n<li>先取得7的二进制：0000 0111 = 7</li>\n<li>按位取反： 1111 1000</li>\n<li>再加1：1111 1001 即为-7的补码</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"口诀\"><a href=\"#口诀\" class=\"headerlink\" title=\"口诀\"></a>口诀</h1><ul>\n<li>正数的原码、反码、补码都相同</li>\n<li>负数的反码是原码符号位不变，剩余位按位取反</li>\n<li>负数的补码是反码+1</li>\n<li>而移码呢，无论正负数，都是在补码的基础上符号位取反</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>概述:无</p>","more":"<h1 id=\"二进制原码：\"><a href=\"#二进制原码：\" class=\"headerlink\" title=\"二进制原码：\"></a>二进制原码：</h1><ul>\n<li><p>最高位为符号位，最高位为0时表示正数，为1时表示负数，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1111 1111 = -127 ; 0111 1111 = 127</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此时称为原码(true form)，但原码不能直接参与运算，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000 0001 = -1</span><br><span class=\"line\">0000 0001 = 1</span><br><span class=\"line\">-1 + 1 = 1000 0001 + 0000 0001 = 1000 0010 = -2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这显然是错误的，此外可以发现原码中有两种0： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000 0000 = +0 ; 1000 0000 = -0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>因此计算机中采用补码(complement)来表示有符号整数。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"补码的定义：\"><a href=\"#补码的定义：\" class=\"headerlink\" title=\"补码的定义：\"></a>补码的定义：</h1><ul>\n<li>对于正整数来说，原码即补码；</li>\n<li>对于负整数来说，其补码与其绝对值的原码相加，和为模（2^n）；</li>\n<li>补码中0的表示方法只有一种：<code>0000 0000</code>；</li>\n<li>强制规定原码的-0（仅最高位为1，其他位全为0）的值为最小的负数，即−2^(n−1)。如byte型数据中，1000 0000 = -128（−2^7）；</li>\n<li>补码再求补码，等于该整数本身；</li>\n</ul>\n<hr>\n<h1 id=\"补码的计算：\"><a href=\"#补码的计算：\" class=\"headerlink\" title=\"补码的计算：\"></a>补码的计算：</h1><ul>\n<li>对于正整数，原码即补码；</li>\n<li>对于负整数，补码的求法为取其绝对值的二进制，按位取反后+1，即求得其补码。如以byte型数据为例，求-7的补码： <ul>\n<li>先取得7的二进制：0000 0111 = 7</li>\n<li>按位取反： 1111 1000</li>\n<li>再加1：1111 1001 即为-7的补码</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"口诀\"><a href=\"#口诀\" class=\"headerlink\" title=\"口诀\"></a>口诀</h1><ul>\n<li>正数的原码、反码、补码都相同</li>\n<li>负数的反码是原码符号位不变，剩余位按位取反</li>\n<li>负数的补码是反码+1</li>\n<li>而移码呢，无论正负数，都是在补码的基础上符号位取反</li>\n</ul>"},{"title":"Hello World","date":"2019-07-05T02:03:01.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_drafts/hello-world.md","raw":"title: Hello World\ndate: 2019-07-05 10:03:01\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":0,"updated":"2019-07-07T13:58:43.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck67jp5wi000c28dhu5fmdwrb","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"kafka在docker中的安装与使用(Windows)","author":"江小渔","date":"2019-07-05T02:26:00.000Z","_content":"概述:无\n<!--more-->\n# 下载\n- 下载镜像\n```\ndocker pull wurstmeister/zookeeper\ndocker pull wurstmeister/kafka\n```\n\n# 启动\n- 启动zookeeper容器\n```\ndocker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper\n```\n\n- 启动kafka容器\n```\ndocker run -d --name kafka --publish 9092:9092 --link zookeeper --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 --env KAFKA_ADVERTISED_HOST_NAME=192.168.59.101 --env KAFKA_ADVERTISED_PORT=9092 wurstmeister/kafka:latest\n```\n- 192.168.59.101 改为宿主机器的IP地址，如果不这么设置，可能会导致在别的机器上访问不到kafka。\n\n#### 进入kafka容器(管理员权限CMD运行)\n```\ndocker exec -it kafka /bin/bash\ncd opt\ncd kafka_2.11-0.10.1.0\nls\n```\n\n#### 测试kafka\n- \n```\nbin/kafka-console-producer.sh --broker-list localhost:9092 --topic mykafka\n```\n- 输入字符\n![upload successful](/images/pasted-2.png)\n- Ctrl+C 退出\n- bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic mykafka --from-beginning\n- 之前输入的内容进行了输出\n![upload successful](/images/pasted-3.png)\n- exit退出container\n- over\n\n#### 参考: \n- https://www.cnblogs.com/yxlblogs/p/10115672.html\n- https://blog.csdn.net/snowcity1231/article/details/54946857","source":"_posts/kafka在docker中的安装与使用.md","raw":"title: kafka在docker中的安装与使用(Windows)\nauthor: 江小渔\ntags: []\ncategories: []\ndate: 2019-07-05 10:26:00\n---\n概述:无\n<!--more-->\n# 下载\n- 下载镜像\n```\ndocker pull wurstmeister/zookeeper\ndocker pull wurstmeister/kafka\n```\n\n# 启动\n- 启动zookeeper容器\n```\ndocker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper\n```\n\n- 启动kafka容器\n```\ndocker run -d --name kafka --publish 9092:9092 --link zookeeper --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 --env KAFKA_ADVERTISED_HOST_NAME=192.168.59.101 --env KAFKA_ADVERTISED_PORT=9092 wurstmeister/kafka:latest\n```\n- 192.168.59.101 改为宿主机器的IP地址，如果不这么设置，可能会导致在别的机器上访问不到kafka。\n\n#### 进入kafka容器(管理员权限CMD运行)\n```\ndocker exec -it kafka /bin/bash\ncd opt\ncd kafka_2.11-0.10.1.0\nls\n```\n\n#### 测试kafka\n- \n```\nbin/kafka-console-producer.sh --broker-list localhost:9092 --topic mykafka\n```\n- 输入字符\n![upload successful](/images/pasted-2.png)\n- Ctrl+C 退出\n- bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic mykafka --from-beginning\n- 之前输入的内容进行了输出\n![upload successful](/images/pasted-3.png)\n- exit退出container\n- over\n\n#### 参考: \n- https://www.cnblogs.com/yxlblogs/p/10115672.html\n- https://blog.csdn.net/snowcity1231/article/details/54946857","slug":"kafka在docker中的安装与使用","published":1,"updated":"2020-02-04T07:25:18.767Z","_id":"ck67jp5wl000f28dhzsu4lspq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>概述:无</p>\n<a id=\"more\"></a>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><ul>\n<li>下载镜像<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull wurstmeister/zookeeper</span><br><span class=\"line\">docker pull wurstmeister/kafka</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><ul>\n<li><p>启动zookeeper容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动kafka容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name kafka --publish 9092:9092 --link zookeeper --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 --env KAFKA_ADVERTISED_HOST_NAME=192.168.59.101 --env KAFKA_ADVERTISED_PORT=9092 wurstmeister/kafka:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>192.168.59.101 改为宿主机器的IP地址，如果不这么设置，可能会导致在别的机器上访问不到kafka。</p>\n</li>\n</ul>\n<h4 id=\"进入kafka容器-管理员权限CMD运行\"><a href=\"#进入kafka容器-管理员权限CMD运行\" class=\"headerlink\" title=\"进入kafka容器(管理员权限CMD运行)\"></a>进入kafka容器(管理员权限CMD运行)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it kafka /bin/bash</span><br><span class=\"line\">cd opt</span><br><span class=\"line\">cd kafka_2.11-0.10.1.0</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试kafka\"><a href=\"#测试kafka\" class=\"headerlink\" title=\"测试kafka\"></a>测试kafka</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic mykafka</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入字符<br><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></p>\n</li>\n<li><p>Ctrl+C 退出</p>\n</li>\n<li><p>bin/kafka-console-consumer.sh –bootstrap-server localhost:9092 –topic mykafka –from-beginning</p>\n</li>\n<li><p>之前输入的内容进行了输出<br><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></p>\n</li>\n<li><p>exit退出container</p>\n</li>\n<li><p>over</p>\n</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h4><ul>\n<li><a href=\"https://www.cnblogs.com/yxlblogs/p/10115672.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yxlblogs/p/10115672.html</a></li>\n<li><a href=\"https://blog.csdn.net/snowcity1231/article/details/54946857\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/snowcity1231/article/details/54946857</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>概述:无</p>","more":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><ul>\n<li>下载镜像<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull wurstmeister/zookeeper</span><br><span class=\"line\">docker pull wurstmeister/kafka</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><ul>\n<li><p>启动zookeeper容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动kafka容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name kafka --publish 9092:9092 --link zookeeper --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 --env KAFKA_ADVERTISED_HOST_NAME=192.168.59.101 --env KAFKA_ADVERTISED_PORT=9092 wurstmeister/kafka:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>192.168.59.101 改为宿主机器的IP地址，如果不这么设置，可能会导致在别的机器上访问不到kafka。</p>\n</li>\n</ul>\n<h4 id=\"进入kafka容器-管理员权限CMD运行\"><a href=\"#进入kafka容器-管理员权限CMD运行\" class=\"headerlink\" title=\"进入kafka容器(管理员权限CMD运行)\"></a>进入kafka容器(管理员权限CMD运行)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it kafka /bin/bash</span><br><span class=\"line\">cd opt</span><br><span class=\"line\">cd kafka_2.11-0.10.1.0</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试kafka\"><a href=\"#测试kafka\" class=\"headerlink\" title=\"测试kafka\"></a>测试kafka</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic mykafka</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入字符<br><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></p>\n</li>\n<li><p>Ctrl+C 退出</p>\n</li>\n<li><p>bin/kafka-console-consumer.sh –bootstrap-server localhost:9092 –topic mykafka –from-beginning</p>\n</li>\n<li><p>之前输入的内容进行了输出<br><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></p>\n</li>\n<li><p>exit退出container</p>\n</li>\n<li><p>over</p>\n</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h4><ul>\n<li><a href=\"https://www.cnblogs.com/yxlblogs/p/10115672.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yxlblogs/p/10115672.html</a></li>\n<li><a href=\"https://blog.csdn.net/snowcity1231/article/details/54946857\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/snowcity1231/article/details/54946857</a></li>\n</ul>"},{"title":"Hexo+nexT的使用","author":"江小渔","date":"2019-06-26T00:16:00.000Z","_content":"# Hexo部署\n\n参考官方文档 https://hexo.io/zh-cn/docs/\n\n概述:Hexo安装使用\n<!--more-->\n#### 前提\n\n安装Hexo之前，必须保证自己的电脑中已经安装好了Node.js和Git。因为这两个软件我之前都安装过，这里就不重复安装过程了，检验方式如下：\n![upload successful](/images/pasted-0.png)\n\n#### 安装Hexo\n```\nnpm install -g hexo-cli\n```\n#### hexo-admin\n```\nnpm i hexo-admin --save\n```\n- 登录`http://localhost:4000/admin`即可看到文章内容，并且在可视化界面中操作文章内容\n\n# 常用指令\n\n```\nhexo g #完整命令为hexo generate,用于生成静态文件\nhexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览\nhexo d #完整命令为hexo deploy,用于将本地文件发布到github上\nhexo n #完整命令为hexo new,用于新建一篇文章\n```\n\n\n\n###### 相关文章\n- https://yq.aliyun.com/articles/117271\n- https://www.jianshu.com/p/21c94eb7bcd1\n- https://www.cnblogs.com/codehome/p/8428738.html","source":"_posts/Hexo-nexT的使用.md","raw":"title: Hexo+nexT的使用\nauthor: 江小渔\ntags:\n  - Hexo\ncategories: []\ndate: 2019-06-26 08:16:00\n---\n# Hexo部署\n\n参考官方文档 https://hexo.io/zh-cn/docs/\n\n概述:Hexo安装使用\n<!--more-->\n#### 前提\n\n安装Hexo之前，必须保证自己的电脑中已经安装好了Node.js和Git。因为这两个软件我之前都安装过，这里就不重复安装过程了，检验方式如下：\n![upload successful](/images/pasted-0.png)\n\n#### 安装Hexo\n```\nnpm install -g hexo-cli\n```\n#### hexo-admin\n```\nnpm i hexo-admin --save\n```\n- 登录`http://localhost:4000/admin`即可看到文章内容，并且在可视化界面中操作文章内容\n\n# 常用指令\n\n```\nhexo g #完整命令为hexo generate,用于生成静态文件\nhexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览\nhexo d #完整命令为hexo deploy,用于将本地文件发布到github上\nhexo n #完整命令为hexo new,用于新建一篇文章\n```\n\n\n\n###### 相关文章\n- https://yq.aliyun.com/articles/117271\n- https://www.jianshu.com/p/21c94eb7bcd1\n- https://www.cnblogs.com/codehome/p/8428738.html","slug":"Hexo-nexT的使用","published":1,"updated":"2020-02-04T07:15:38.008Z","_id":"ck67jp5wn000h28dh2w8w8qhp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Hexo部署\"><a href=\"#Hexo部署\" class=\"headerlink\" title=\"Hexo部署\"></a>Hexo部署</h1><p>参考官方文档 <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a></p>\n<p>概述:Hexo安装使用</p>\n<a id=\"more\"></a>\n<h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><p>安装Hexo之前，必须保证自己的电脑中已经安装好了Node.js和Git。因为这两个软件我之前都安装过，这里就不重复安装过程了，检验方式如下：<br><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"hexo-admin\"><a href=\"#hexo-admin\" class=\"headerlink\" title=\"hexo-admin\"></a>hexo-admin</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-admin --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>登录<code>http://localhost:4000/admin</code>即可看到文章内容，并且在可视化界面中操作文章内容</li>\n</ul>\n<h1 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g #完整命令为hexo generate,用于生成静态文件</span><br><span class=\"line\">hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览</span><br><span class=\"line\">hexo d #完整命令为hexo deploy,用于将本地文件发布到github上</span><br><span class=\"line\">hexo n #完整命令为hexo new,用于新建一篇文章</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h6><ul>\n<li><a href=\"https://yq.aliyun.com/articles/117271\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/117271</a></li>\n<li><a href=\"https://www.jianshu.com/p/21c94eb7bcd1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/21c94eb7bcd1</a></li>\n<li><a href=\"https://www.cnblogs.com/codehome/p/8428738.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/codehome/p/8428738.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Hexo部署\"><a href=\"#Hexo部署\" class=\"headerlink\" title=\"Hexo部署\"></a>Hexo部署</h1><p>参考官方文档 <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a></p>\n<p>概述:Hexo安装使用</p>","more":"<h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><p>安装Hexo之前，必须保证自己的电脑中已经安装好了Node.js和Git。因为这两个软件我之前都安装过，这里就不重复安装过程了，检验方式如下：<br><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"hexo-admin\"><a href=\"#hexo-admin\" class=\"headerlink\" title=\"hexo-admin\"></a>hexo-admin</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-admin --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>登录<code>http://localhost:4000/admin</code>即可看到文章内容，并且在可视化界面中操作文章内容</li>\n</ul>\n<h1 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g #完整命令为hexo generate,用于生成静态文件</span><br><span class=\"line\">hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览</span><br><span class=\"line\">hexo d #完整命令为hexo deploy,用于将本地文件发布到github上</span><br><span class=\"line\">hexo n #完整命令为hexo new,用于新建一篇文章</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h6><ul>\n<li><a href=\"https://yq.aliyun.com/articles/117271\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/117271</a></li>\n<li><a href=\"https://www.jianshu.com/p/21c94eb7bcd1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/21c94eb7bcd1</a></li>\n<li><a href=\"https://www.cnblogs.com/codehome/p/8428738.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/codehome/p/8428738.html</a></li>\n</ul>"},{"title":"golang拾遗二多线程","author":"江小渔","date":"2019-12-09T06:38:00.000Z","_content":"概述:goroutine/条件变量sync.Cond/进程线程goroutine/sync.WaitGroup和sync.Once\n<!--more-->\n# goroutine\n- 下面代码会输出什么\n```\npackage main\n \nimport \"fmt\"\n \nfunc main() {\n\tfor i := 0; i < 10; i++ {\n\t\tgo func() {\n\t\t\tfmt.Println(i)\n\t\t}()\n\t}\n\t//time.Sleep(3*time.Microsecond)\n}\n```\n1. 不会有任何内容被打印出来\n    1. go函数的执行时间总是会明显滞后于它所属的go语句的执行时间。当然了，这里所说的“明显滞后”是对于计算机的 CPU 时钟和 Go 程序来说的\n    2. 只要go语句本身执行完毕，Go 程序完全不会等待go函数的执行，它会立刻去执行后边的语句。这就是所谓的异步并发地执行\n    3. \n2. 打印出 10 个10\n    1. 运行一下你就知道了~\n- struct{}类型值的表示法只有一个，即：struct{}{}\n- 多个 goroutine 按照既定的顺序运行?\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\nfunc main() {\n\tvar count uint32\n\ttrigger := func(i uint32, fn func()) {\n\t\tfor {\n\t\t\tif n := atomic.LoadUint32(&count); n == i {\n\t\t\t\tfn()\n\t\t\t\tatomic.AddUint32(&count, 1)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\ttime.Sleep(time.Nanosecond)\n\t\t}\n\t}\n\tfor i := uint32(0); i < 10; i++ {\n\t\tgo func(i uint32) {\n\t\t\tfn := func() {\n\t\t\t\tfmt.Println(i)\n\t\t\t}\n\t\t\ttrigger(i, fn)\n\t\t}(i)\n\t}\n\ttrigger(10, func() {}) //想让主 goroutine 最后一个运行完毕,等待goroutine\n}\n```\n1. 操作变量count的时候使用的都是原子操作。这是由于trigger函数会被多个 goroutine 并发地调用，所以它用到的非本地变量count，就被多个用户级线程共用了。因此，对它的操作就产生了竞态条件（race condition），破坏了程序的并发安全性\n\n\n# 条件变量sync.Cond\n- 条件变量的初始化离不开互斥锁，并且它的方法有的也是基于互斥锁的。\n```go\nlock.Lock()\nfor mailbox == 1 {\nsendCond.Wait()\n}\nmailbox = 1\nlock.Unlock()\nrecvCond.Signal()\n```\nQ1. 为什么先要锁定条件变量基于的互斥锁，才能调用它的Wait方法？\nQ2. 为什么要用for语句来包裹调用其Wait方法的表达式，用if语句不行吗？\n- 条件变量的Wait方法主要做了四件事。\n1. 把调用它的 goroutine（也就是当前的goroutine）加入到当前条件变量的通知队列中。\n2. 解锁当前的条件变量基于的那个互斥锁。\n3. 让当前的 goroutine 处于等待状态，等到通知到来时再决定是否唤醒它。此时，这个 goroutine 就会阻塞在调用这个Wait方法的那行代码上。\n4. 如果通知到来并且决定唤醒这个 goroutine，那么就在唤醒它之后重新锁定当前条件变量基于的互斥锁。自此之后，当前的 goroutine 就会继续执行后面的代码了。\n\nA1: 因为条件变量的Wait方法在阻塞当前的 goroutine 之前会解锁它基于的互斥锁，所以在调用该Wait方法之前我们必须先锁定那个互斥锁，否则在调用这个Wait方法时，就会引发一个不可恢复的 panic。\n\nA2:  很显然，if语句只会对共享资源的状态检查一次，而for语句却可以做多次检查，直到这个状态改变为止。那为什么要做多次检查呢？\n\n这主要是为了保险起见。如果一个 goroutine 因收到通知而被唤醒，但却发现共享资源的状态，依然不符合它的要求，那么就应该再次调用条件变量的Wait方法，并继续等待下次通知的到来。\n\n这种情况是很有可能发生的，具体如下面所示。\n\n1. 有多个 goroutine 在等待共享资源的同一种状态。比如，它们都在等mailbox变量的值不为0的时候再把它的值变为0，这就相当于有多个人在等着我向信箱里放置情报。虽然等待的 goroutine 有多个，但每次成功的 goroutine 却只可能有一个。别忘了，条件变量的Wait方法会在当前的 goroutine 醒来后先重新锁定那个互斥锁。在成功的 goroutine 最终解锁互斥锁之后，其他的 goroutine 会先后进入临界区，但它们会发现共享资源的状态依然不是它们想要的。这个时候，for循环就很有必要了。\n\n2. 共享资源可能有的状态不是两个，而是更多。比如，mailbox变量的可能值不只有0和1，还有2、3、4。这种情况下，由于状态在每次改变后的结果只可能有一个，所以，在设计合理的前提下，单一的结果一定不可能满足所有 goroutine 的条件。那些未被满足的 goroutine 显然还需要继续等待和检查。\n\n3. 有一种可能，共享资源的状态只有两个，并且每种状态都只有一个 goroutine 在关注，就像我们在主问题当中实现的那个例子那样。不过，即使是这样，使用for语句仍然是有必要的。原因是，在一些多 CPU 核心的计算机系统中，即使没有收到条件变量的通知，调用其Wait方法的 goroutine 也是有可能被唤醒的。这是由计算机硬件层面决定的，即使是操作系统（比如 Linux）本身提供的条件变量也会如此。\n\n综上所述，在包裹条件变量的Wait方法的时候，我们总是应该使用for语句。\n\nQ3: 条件变量的Signal方法和Broadcast方法有哪些异同？\nA3: 条件变量的Signal方法和Broadcast方法都是被用来发送通知的，不同的是，前者的通知只会唤醒一个因此而等待的 goroutine，而后者的通知却会唤醒所有为此等待的 goroutine。条件变量的Wait方法总会把当前的 goroutine 添加到通知队列的队尾，而它的Signal方法总会从通知队列的队首开始查找可被唤醒的 goroutine。所以，因Signal方法的通知而被唤醒的 goroutine 一般都是最早等待的那一个。\n\n\n# 进程线程goroutine\n\n# 原子操作\nQ1: sync/atomic包中提供了几种原子操作？可操作的数据类型又有哪些？\n\nA1: sync/atomic包中的函数可以做的原子操作有：加法（add）、比较并交换（compare and swap，简称 CAS）、加载（load）、存储（store）和交换（swap）。\n\n这些函数针对的数据类型并不多。但是，对这些类型中的每一个，sync/atomic包都会有一套函数给予支持。这些数据类型有：int32、int64、uint32、uint64、uintptr，以及unsafe包中的Pointer。不过，针对unsafe.Pointer类型，该包并未提供进行原子加法操作的函数。\n\n此外，sync/atomic包还提供了一个名为Value的类型，它可以被用来存储任意类型的值。\n\nQ2: atomic.AddUint32和atomic.AddUint64函数做原子减法,如何实现\n```\n    num := uint32(18)\n\tfmt.Printf(\"The number: %d\\n\", num)\n\tdelta := int32(-3)\n\tatomic.AddUint32(&num, uint32(delta))\n\tfmt.Printf(\"The number: %d\\n\", num)\n\tatomic.AddUint32(&num, ^uint32(-(-3)-1))\n\tfmt.Printf(\"The number: %d\\n\", num)\n\n\tfmt.Printf(\"The two's complement of %d: %b\\n\",\n\t\tdelta, uint32(delta)) // -3的补码。\n\tfmt.Printf(\"The equivalent: %b\\n\", ^uint32(-(-3)-1)) // 与-3的补码相同。\n\tfmt.Println()\n\t//uint32(delta)和^uint32(-N-1)) 是两种求补码的方式\n```\nQ3: 比较并交换操作与交换操作相比有什么不同？优势在哪里？\n\nA3: 比较并交换操作即 CAS操作，是有条件的交换操作，只有在条件满足的情况下才会进行值的交换。\n```golang\nfor {\nif atomic.CompareAndSwapInt32(&num2, 10, 0) {\nfmt.Println(\"The second number has gone to zero.\")\nbreak\n}\ntime.Sleep(time.Millisecond * 500)\n}\n```\n\n## 使用建议\n1. 不要把内部使用的原子值暴露给外界。比如，声明一个全局的原子变量并不是一个正确的做法。这个变量的访问权限最起码也应该是包级私有的。\n2. 如果不得不让包外，或模块外的代码使用你的原子值，那么可以声明一个包级私有的原子变量，然后再通过一个或多个公开的函数，让外界间接地使用到它。注意，这种情况下不要把原子值传递到外界，不论是传递原子值本身还是它的指针值。\n3. 如果通过某个函数可以向内部的原子值存储值的话，那么就应该在这个函数中先判断被存储值类型的合法性。若不合法，则应该直接返回对应的错误值，从而避免 panic 的发生。\n4. 如果可能的话，我们可以把原子值封装到一个数据类型中，比如一个结构体类型。这样，我们既可以通过该类型的方法更加安全地存储值，又可以在该类型中包含可存储值的合法类型信息。\n\n# sync.WaitGroup和sync.Once\n- 使用WaitGroup值:先统一Add，再并发Done，最后Wait\n- Once类型使用互斥锁和原子操作实现了功能，而WaitGroup类型中只用到了原子操作。","source":"_posts/golang拾遗二多线程.md","raw":"title: golang拾遗二多线程\nauthor: 江小渔\ntags:\n  - golang\ncategories:\n  - golang\ndate: 2019-12-09 14:38:00\n---\n概述:goroutine/条件变量sync.Cond/进程线程goroutine/sync.WaitGroup和sync.Once\n<!--more-->\n# goroutine\n- 下面代码会输出什么\n```\npackage main\n \nimport \"fmt\"\n \nfunc main() {\n\tfor i := 0; i < 10; i++ {\n\t\tgo func() {\n\t\t\tfmt.Println(i)\n\t\t}()\n\t}\n\t//time.Sleep(3*time.Microsecond)\n}\n```\n1. 不会有任何内容被打印出来\n    1. go函数的执行时间总是会明显滞后于它所属的go语句的执行时间。当然了，这里所说的“明显滞后”是对于计算机的 CPU 时钟和 Go 程序来说的\n    2. 只要go语句本身执行完毕，Go 程序完全不会等待go函数的执行，它会立刻去执行后边的语句。这就是所谓的异步并发地执行\n    3. \n2. 打印出 10 个10\n    1. 运行一下你就知道了~\n- struct{}类型值的表示法只有一个，即：struct{}{}\n- 多个 goroutine 按照既定的顺序运行?\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\nfunc main() {\n\tvar count uint32\n\ttrigger := func(i uint32, fn func()) {\n\t\tfor {\n\t\t\tif n := atomic.LoadUint32(&count); n == i {\n\t\t\t\tfn()\n\t\t\t\tatomic.AddUint32(&count, 1)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\ttime.Sleep(time.Nanosecond)\n\t\t}\n\t}\n\tfor i := uint32(0); i < 10; i++ {\n\t\tgo func(i uint32) {\n\t\t\tfn := func() {\n\t\t\t\tfmt.Println(i)\n\t\t\t}\n\t\t\ttrigger(i, fn)\n\t\t}(i)\n\t}\n\ttrigger(10, func() {}) //想让主 goroutine 最后一个运行完毕,等待goroutine\n}\n```\n1. 操作变量count的时候使用的都是原子操作。这是由于trigger函数会被多个 goroutine 并发地调用，所以它用到的非本地变量count，就被多个用户级线程共用了。因此，对它的操作就产生了竞态条件（race condition），破坏了程序的并发安全性\n\n\n# 条件变量sync.Cond\n- 条件变量的初始化离不开互斥锁，并且它的方法有的也是基于互斥锁的。\n```go\nlock.Lock()\nfor mailbox == 1 {\nsendCond.Wait()\n}\nmailbox = 1\nlock.Unlock()\nrecvCond.Signal()\n```\nQ1. 为什么先要锁定条件变量基于的互斥锁，才能调用它的Wait方法？\nQ2. 为什么要用for语句来包裹调用其Wait方法的表达式，用if语句不行吗？\n- 条件变量的Wait方法主要做了四件事。\n1. 把调用它的 goroutine（也就是当前的goroutine）加入到当前条件变量的通知队列中。\n2. 解锁当前的条件变量基于的那个互斥锁。\n3. 让当前的 goroutine 处于等待状态，等到通知到来时再决定是否唤醒它。此时，这个 goroutine 就会阻塞在调用这个Wait方法的那行代码上。\n4. 如果通知到来并且决定唤醒这个 goroutine，那么就在唤醒它之后重新锁定当前条件变量基于的互斥锁。自此之后，当前的 goroutine 就会继续执行后面的代码了。\n\nA1: 因为条件变量的Wait方法在阻塞当前的 goroutine 之前会解锁它基于的互斥锁，所以在调用该Wait方法之前我们必须先锁定那个互斥锁，否则在调用这个Wait方法时，就会引发一个不可恢复的 panic。\n\nA2:  很显然，if语句只会对共享资源的状态检查一次，而for语句却可以做多次检查，直到这个状态改变为止。那为什么要做多次检查呢？\n\n这主要是为了保险起见。如果一个 goroutine 因收到通知而被唤醒，但却发现共享资源的状态，依然不符合它的要求，那么就应该再次调用条件变量的Wait方法，并继续等待下次通知的到来。\n\n这种情况是很有可能发生的，具体如下面所示。\n\n1. 有多个 goroutine 在等待共享资源的同一种状态。比如，它们都在等mailbox变量的值不为0的时候再把它的值变为0，这就相当于有多个人在等着我向信箱里放置情报。虽然等待的 goroutine 有多个，但每次成功的 goroutine 却只可能有一个。别忘了，条件变量的Wait方法会在当前的 goroutine 醒来后先重新锁定那个互斥锁。在成功的 goroutine 最终解锁互斥锁之后，其他的 goroutine 会先后进入临界区，但它们会发现共享资源的状态依然不是它们想要的。这个时候，for循环就很有必要了。\n\n2. 共享资源可能有的状态不是两个，而是更多。比如，mailbox变量的可能值不只有0和1，还有2、3、4。这种情况下，由于状态在每次改变后的结果只可能有一个，所以，在设计合理的前提下，单一的结果一定不可能满足所有 goroutine 的条件。那些未被满足的 goroutine 显然还需要继续等待和检查。\n\n3. 有一种可能，共享资源的状态只有两个，并且每种状态都只有一个 goroutine 在关注，就像我们在主问题当中实现的那个例子那样。不过，即使是这样，使用for语句仍然是有必要的。原因是，在一些多 CPU 核心的计算机系统中，即使没有收到条件变量的通知，调用其Wait方法的 goroutine 也是有可能被唤醒的。这是由计算机硬件层面决定的，即使是操作系统（比如 Linux）本身提供的条件变量也会如此。\n\n综上所述，在包裹条件变量的Wait方法的时候，我们总是应该使用for语句。\n\nQ3: 条件变量的Signal方法和Broadcast方法有哪些异同？\nA3: 条件变量的Signal方法和Broadcast方法都是被用来发送通知的，不同的是，前者的通知只会唤醒一个因此而等待的 goroutine，而后者的通知却会唤醒所有为此等待的 goroutine。条件变量的Wait方法总会把当前的 goroutine 添加到通知队列的队尾，而它的Signal方法总会从通知队列的队首开始查找可被唤醒的 goroutine。所以，因Signal方法的通知而被唤醒的 goroutine 一般都是最早等待的那一个。\n\n\n# 进程线程goroutine\n\n# 原子操作\nQ1: sync/atomic包中提供了几种原子操作？可操作的数据类型又有哪些？\n\nA1: sync/atomic包中的函数可以做的原子操作有：加法（add）、比较并交换（compare and swap，简称 CAS）、加载（load）、存储（store）和交换（swap）。\n\n这些函数针对的数据类型并不多。但是，对这些类型中的每一个，sync/atomic包都会有一套函数给予支持。这些数据类型有：int32、int64、uint32、uint64、uintptr，以及unsafe包中的Pointer。不过，针对unsafe.Pointer类型，该包并未提供进行原子加法操作的函数。\n\n此外，sync/atomic包还提供了一个名为Value的类型，它可以被用来存储任意类型的值。\n\nQ2: atomic.AddUint32和atomic.AddUint64函数做原子减法,如何实现\n```\n    num := uint32(18)\n\tfmt.Printf(\"The number: %d\\n\", num)\n\tdelta := int32(-3)\n\tatomic.AddUint32(&num, uint32(delta))\n\tfmt.Printf(\"The number: %d\\n\", num)\n\tatomic.AddUint32(&num, ^uint32(-(-3)-1))\n\tfmt.Printf(\"The number: %d\\n\", num)\n\n\tfmt.Printf(\"The two's complement of %d: %b\\n\",\n\t\tdelta, uint32(delta)) // -3的补码。\n\tfmt.Printf(\"The equivalent: %b\\n\", ^uint32(-(-3)-1)) // 与-3的补码相同。\n\tfmt.Println()\n\t//uint32(delta)和^uint32(-N-1)) 是两种求补码的方式\n```\nQ3: 比较并交换操作与交换操作相比有什么不同？优势在哪里？\n\nA3: 比较并交换操作即 CAS操作，是有条件的交换操作，只有在条件满足的情况下才会进行值的交换。\n```golang\nfor {\nif atomic.CompareAndSwapInt32(&num2, 10, 0) {\nfmt.Println(\"The second number has gone to zero.\")\nbreak\n}\ntime.Sleep(time.Millisecond * 500)\n}\n```\n\n## 使用建议\n1. 不要把内部使用的原子值暴露给外界。比如，声明一个全局的原子变量并不是一个正确的做法。这个变量的访问权限最起码也应该是包级私有的。\n2. 如果不得不让包外，或模块外的代码使用你的原子值，那么可以声明一个包级私有的原子变量，然后再通过一个或多个公开的函数，让外界间接地使用到它。注意，这种情况下不要把原子值传递到外界，不论是传递原子值本身还是它的指针值。\n3. 如果通过某个函数可以向内部的原子值存储值的话，那么就应该在这个函数中先判断被存储值类型的合法性。若不合法，则应该直接返回对应的错误值，从而避免 panic 的发生。\n4. 如果可能的话，我们可以把原子值封装到一个数据类型中，比如一个结构体类型。这样，我们既可以通过该类型的方法更加安全地存储值，又可以在该类型中包含可存储值的合法类型信息。\n\n# sync.WaitGroup和sync.Once\n- 使用WaitGroup值:先统一Add，再并发Done，最后Wait\n- Once类型使用互斥锁和原子操作实现了功能，而WaitGroup类型中只用到了原子操作。","slug":"golang拾遗二多线程","published":1,"updated":"2020-02-04T07:22:53.824Z","_id":"ck67jp5zx000l28dhpnng3kyp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>概述:goroutine/条件变量sync.Cond/进程线程goroutine/sync.WaitGroup和sync.Once</p>\n<a id=\"more\"></a>\n<h1 id=\"goroutine\"><a href=\"#goroutine\" class=\"headerlink\" title=\"goroutine\"></a>goroutine</h1><ul>\n<li>下面代码会输出什么<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"> </span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\tgo func() &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(i)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//time.Sleep(3*time.Microsecond)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>不会有任何内容被打印出来<ol>\n<li>go函数的执行时间总是会明显滞后于它所属的go语句的执行时间。当然了，这里所说的“明显滞后”是对于计算机的 CPU 时钟和 Go 程序来说的</li>\n<li>只要go语句本身执行完毕，Go 程序完全不会等待go函数的执行，它会立刻去执行后边的语句。这就是所谓的异步并发地执行</li>\n<li></li>\n</ol>\n</li>\n<li>打印出 10 个10<ol>\n<li>运行一下你就知道了~</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>struct{}类型值的表示法只有一个，即：struct{}{}</li>\n<li>多个 goroutine 按照既定的顺序运行?<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync/atomic\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> count <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\ttrigger := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">uint32</span>, fn <span class=\"keyword\">func</span>()</span>)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> n := atomic.LoadUint32(&amp;count); n == i &#123;</span><br><span class=\"line\">\t\t\t\tfn()</span><br><span class=\"line\">\t\t\t\tatomic.AddUint32(&amp;count, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttime.Sleep(time.Nanosecond)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">uint32</span>(<span class=\"number\">0</span>); i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">uint32</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t\tfn := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(i)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttrigger(i, fn)</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttrigger(<span class=\"number\">10</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;&#125;) <span class=\"comment\">//想让主 goroutine 最后一个运行完毕,等待goroutine</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>操作变量count的时候使用的都是原子操作。这是由于trigger函数会被多个 goroutine 并发地调用，所以它用到的非本地变量count，就被多个用户级线程共用了。因此，对它的操作就产生了竞态条件（race condition），破坏了程序的并发安全性</li>\n</ol>\n<h1 id=\"条件变量sync-Cond\"><a href=\"#条件变量sync-Cond\" class=\"headerlink\" title=\"条件变量sync.Cond\"></a>条件变量sync.Cond</h1><ul>\n<li>条件变量的初始化离不开互斥锁，并且它的方法有的也是基于互斥锁的。<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock.Lock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> mailbox == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">sendCond.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mailbox = <span class=\"number\">1</span></span><br><span class=\"line\">lock.Unlock()</span><br><span class=\"line\">recvCond.Signal()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>Q1. 为什么先要锁定条件变量基于的互斥锁，才能调用它的Wait方法？<br>Q2. 为什么要用for语句来包裹调用其Wait方法的表达式，用if语句不行吗？</p>\n<ul>\n<li>条件变量的Wait方法主要做了四件事。</li>\n</ul>\n<ol>\n<li>把调用它的 goroutine（也就是当前的goroutine）加入到当前条件变量的通知队列中。</li>\n<li>解锁当前的条件变量基于的那个互斥锁。</li>\n<li>让当前的 goroutine 处于等待状态，等到通知到来时再决定是否唤醒它。此时，这个 goroutine 就会阻塞在调用这个Wait方法的那行代码上。</li>\n<li>如果通知到来并且决定唤醒这个 goroutine，那么就在唤醒它之后重新锁定当前条件变量基于的互斥锁。自此之后，当前的 goroutine 就会继续执行后面的代码了。</li>\n</ol>\n<p>A1: 因为条件变量的Wait方法在阻塞当前的 goroutine 之前会解锁它基于的互斥锁，所以在调用该Wait方法之前我们必须先锁定那个互斥锁，否则在调用这个Wait方法时，就会引发一个不可恢复的 panic。</p>\n<p>A2:  很显然，if语句只会对共享资源的状态检查一次，而for语句却可以做多次检查，直到这个状态改变为止。那为什么要做多次检查呢？</p>\n<p>这主要是为了保险起见。如果一个 goroutine 因收到通知而被唤醒，但却发现共享资源的状态，依然不符合它的要求，那么就应该再次调用条件变量的Wait方法，并继续等待下次通知的到来。</p>\n<p>这种情况是很有可能发生的，具体如下面所示。</p>\n<ol>\n<li><p>有多个 goroutine 在等待共享资源的同一种状态。比如，它们都在等mailbox变量的值不为0的时候再把它的值变为0，这就相当于有多个人在等着我向信箱里放置情报。虽然等待的 goroutine 有多个，但每次成功的 goroutine 却只可能有一个。别忘了，条件变量的Wait方法会在当前的 goroutine 醒来后先重新锁定那个互斥锁。在成功的 goroutine 最终解锁互斥锁之后，其他的 goroutine 会先后进入临界区，但它们会发现共享资源的状态依然不是它们想要的。这个时候，for循环就很有必要了。</p>\n</li>\n<li><p>共享资源可能有的状态不是两个，而是更多。比如，mailbox变量的可能值不只有0和1，还有2、3、4。这种情况下，由于状态在每次改变后的结果只可能有一个，所以，在设计合理的前提下，单一的结果一定不可能满足所有 goroutine 的条件。那些未被满足的 goroutine 显然还需要继续等待和检查。</p>\n</li>\n<li><p>有一种可能，共享资源的状态只有两个，并且每种状态都只有一个 goroutine 在关注，就像我们在主问题当中实现的那个例子那样。不过，即使是这样，使用for语句仍然是有必要的。原因是，在一些多 CPU 核心的计算机系统中，即使没有收到条件变量的通知，调用其Wait方法的 goroutine 也是有可能被唤醒的。这是由计算机硬件层面决定的，即使是操作系统（比如 Linux）本身提供的条件变量也会如此。</p>\n</li>\n</ol>\n<p>综上所述，在包裹条件变量的Wait方法的时候，我们总是应该使用for语句。</p>\n<p>Q3: 条件变量的Signal方法和Broadcast方法有哪些异同？<br>A3: 条件变量的Signal方法和Broadcast方法都是被用来发送通知的，不同的是，前者的通知只会唤醒一个因此而等待的 goroutine，而后者的通知却会唤醒所有为此等待的 goroutine。条件变量的Wait方法总会把当前的 goroutine 添加到通知队列的队尾，而它的Signal方法总会从通知队列的队首开始查找可被唤醒的 goroutine。所以，因Signal方法的通知而被唤醒的 goroutine 一般都是最早等待的那一个。</p>\n<h1 id=\"进程线程goroutine\"><a href=\"#进程线程goroutine\" class=\"headerlink\" title=\"进程线程goroutine\"></a>进程线程goroutine</h1><h1 id=\"原子操作\"><a href=\"#原子操作\" class=\"headerlink\" title=\"原子操作\"></a>原子操作</h1><p>Q1: sync/atomic包中提供了几种原子操作？可操作的数据类型又有哪些？</p>\n<p>A1: sync/atomic包中的函数可以做的原子操作有：加法（add）、比较并交换（compare and swap，简称 CAS）、加载（load）、存储（store）和交换（swap）。</p>\n<p>这些函数针对的数据类型并不多。但是，对这些类型中的每一个，sync/atomic包都会有一套函数给予支持。这些数据类型有：int32、int64、uint32、uint64、uintptr，以及unsafe包中的Pointer。不过，针对unsafe.Pointer类型，该包并未提供进行原子加法操作的函数。</p>\n<p>此外，sync/atomic包还提供了一个名为Value的类型，它可以被用来存储任意类型的值。</p>\n<p>Q2: atomic.AddUint32和atomic.AddUint64函数做原子减法,如何实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   num := uint32(18)</span><br><span class=\"line\">fmt.Printf(&quot;The number: %d\\n&quot;, num)</span><br><span class=\"line\">delta := int32(-3)</span><br><span class=\"line\">atomic.AddUint32(&amp;num, uint32(delta))</span><br><span class=\"line\">fmt.Printf(&quot;The number: %d\\n&quot;, num)</span><br><span class=\"line\">atomic.AddUint32(&amp;num, ^uint32(-(-3)-1))</span><br><span class=\"line\">fmt.Printf(&quot;The number: %d\\n&quot;, num)</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(&quot;The two&apos;s complement of %d: %b\\n&quot;,</span><br><span class=\"line\">\tdelta, uint32(delta)) // -3的补码。</span><br><span class=\"line\">fmt.Printf(&quot;The equivalent: %b\\n&quot;, ^uint32(-(-3)-1)) // 与-3的补码相同。</span><br><span class=\"line\">fmt.Println()</span><br><span class=\"line\">//uint32(delta)和^uint32(-N-1)) 是两种求补码的方式</span><br></pre></td></tr></table></figure>\n\n<p>Q3: 比较并交换操作与交换操作相比有什么不同？优势在哪里？</p>\n<p>A3: 比较并交换操作即 CAS操作，是有条件的交换操作，只有在条件满足的情况下才会进行值的交换。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;num2, <span class=\"number\">10</span>, <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"The second number has gone to zero.\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">break</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">time.Sleep(time.Millisecond * <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h2><ol>\n<li>不要把内部使用的原子值暴露给外界。比如，声明一个全局的原子变量并不是一个正确的做法。这个变量的访问权限最起码也应该是包级私有的。</li>\n<li>如果不得不让包外，或模块外的代码使用你的原子值，那么可以声明一个包级私有的原子变量，然后再通过一个或多个公开的函数，让外界间接地使用到它。注意，这种情况下不要把原子值传递到外界，不论是传递原子值本身还是它的指针值。</li>\n<li>如果通过某个函数可以向内部的原子值存储值的话，那么就应该在这个函数中先判断被存储值类型的合法性。若不合法，则应该直接返回对应的错误值，从而避免 panic 的发生。</li>\n<li>如果可能的话，我们可以把原子值封装到一个数据类型中，比如一个结构体类型。这样，我们既可以通过该类型的方法更加安全地存储值，又可以在该类型中包含可存储值的合法类型信息。</li>\n</ol>\n<h1 id=\"sync-WaitGroup和sync-Once\"><a href=\"#sync-WaitGroup和sync-Once\" class=\"headerlink\" title=\"sync.WaitGroup和sync.Once\"></a>sync.WaitGroup和sync.Once</h1><ul>\n<li>使用WaitGroup值:先统一Add，再并发Done，最后Wait</li>\n<li>Once类型使用互斥锁和原子操作实现了功能，而WaitGroup类型中只用到了原子操作。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>概述:goroutine/条件变量sync.Cond/进程线程goroutine/sync.WaitGroup和sync.Once</p>","more":"<h1 id=\"goroutine\"><a href=\"#goroutine\" class=\"headerlink\" title=\"goroutine\"></a>goroutine</h1><ul>\n<li>下面代码会输出什么<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"> </span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\tgo func() &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(i)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//time.Sleep(3*time.Microsecond)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>不会有任何内容被打印出来<ol>\n<li>go函数的执行时间总是会明显滞后于它所属的go语句的执行时间。当然了，这里所说的“明显滞后”是对于计算机的 CPU 时钟和 Go 程序来说的</li>\n<li>只要go语句本身执行完毕，Go 程序完全不会等待go函数的执行，它会立刻去执行后边的语句。这就是所谓的异步并发地执行</li>\n<li></li>\n</ol>\n</li>\n<li>打印出 10 个10<ol>\n<li>运行一下你就知道了~</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>struct{}类型值的表示法只有一个，即：struct{}{}</li>\n<li>多个 goroutine 按照既定的顺序运行?<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync/atomic\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> count <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\ttrigger := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">uint32</span>, fn <span class=\"keyword\">func</span>()</span>)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> n := atomic.LoadUint32(&amp;count); n == i &#123;</span><br><span class=\"line\">\t\t\t\tfn()</span><br><span class=\"line\">\t\t\t\tatomic.AddUint32(&amp;count, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttime.Sleep(time.Nanosecond)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">uint32</span>(<span class=\"number\">0</span>); i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">uint32</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t\tfn := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(i)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttrigger(i, fn)</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttrigger(<span class=\"number\">10</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;&#125;) <span class=\"comment\">//想让主 goroutine 最后一个运行完毕,等待goroutine</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>操作变量count的时候使用的都是原子操作。这是由于trigger函数会被多个 goroutine 并发地调用，所以它用到的非本地变量count，就被多个用户级线程共用了。因此，对它的操作就产生了竞态条件（race condition），破坏了程序的并发安全性</li>\n</ol>\n<h1 id=\"条件变量sync-Cond\"><a href=\"#条件变量sync-Cond\" class=\"headerlink\" title=\"条件变量sync.Cond\"></a>条件变量sync.Cond</h1><ul>\n<li>条件变量的初始化离不开互斥锁，并且它的方法有的也是基于互斥锁的。<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock.Lock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> mailbox == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">sendCond.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mailbox = <span class=\"number\">1</span></span><br><span class=\"line\">lock.Unlock()</span><br><span class=\"line\">recvCond.Signal()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>Q1. 为什么先要锁定条件变量基于的互斥锁，才能调用它的Wait方法？<br>Q2. 为什么要用for语句来包裹调用其Wait方法的表达式，用if语句不行吗？</p>\n<ul>\n<li>条件变量的Wait方法主要做了四件事。</li>\n</ul>\n<ol>\n<li>把调用它的 goroutine（也就是当前的goroutine）加入到当前条件变量的通知队列中。</li>\n<li>解锁当前的条件变量基于的那个互斥锁。</li>\n<li>让当前的 goroutine 处于等待状态，等到通知到来时再决定是否唤醒它。此时，这个 goroutine 就会阻塞在调用这个Wait方法的那行代码上。</li>\n<li>如果通知到来并且决定唤醒这个 goroutine，那么就在唤醒它之后重新锁定当前条件变量基于的互斥锁。自此之后，当前的 goroutine 就会继续执行后面的代码了。</li>\n</ol>\n<p>A1: 因为条件变量的Wait方法在阻塞当前的 goroutine 之前会解锁它基于的互斥锁，所以在调用该Wait方法之前我们必须先锁定那个互斥锁，否则在调用这个Wait方法时，就会引发一个不可恢复的 panic。</p>\n<p>A2:  很显然，if语句只会对共享资源的状态检查一次，而for语句却可以做多次检查，直到这个状态改变为止。那为什么要做多次检查呢？</p>\n<p>这主要是为了保险起见。如果一个 goroutine 因收到通知而被唤醒，但却发现共享资源的状态，依然不符合它的要求，那么就应该再次调用条件变量的Wait方法，并继续等待下次通知的到来。</p>\n<p>这种情况是很有可能发生的，具体如下面所示。</p>\n<ol>\n<li><p>有多个 goroutine 在等待共享资源的同一种状态。比如，它们都在等mailbox变量的值不为0的时候再把它的值变为0，这就相当于有多个人在等着我向信箱里放置情报。虽然等待的 goroutine 有多个，但每次成功的 goroutine 却只可能有一个。别忘了，条件变量的Wait方法会在当前的 goroutine 醒来后先重新锁定那个互斥锁。在成功的 goroutine 最终解锁互斥锁之后，其他的 goroutine 会先后进入临界区，但它们会发现共享资源的状态依然不是它们想要的。这个时候，for循环就很有必要了。</p>\n</li>\n<li><p>共享资源可能有的状态不是两个，而是更多。比如，mailbox变量的可能值不只有0和1，还有2、3、4。这种情况下，由于状态在每次改变后的结果只可能有一个，所以，在设计合理的前提下，单一的结果一定不可能满足所有 goroutine 的条件。那些未被满足的 goroutine 显然还需要继续等待和检查。</p>\n</li>\n<li><p>有一种可能，共享资源的状态只有两个，并且每种状态都只有一个 goroutine 在关注，就像我们在主问题当中实现的那个例子那样。不过，即使是这样，使用for语句仍然是有必要的。原因是，在一些多 CPU 核心的计算机系统中，即使没有收到条件变量的通知，调用其Wait方法的 goroutine 也是有可能被唤醒的。这是由计算机硬件层面决定的，即使是操作系统（比如 Linux）本身提供的条件变量也会如此。</p>\n</li>\n</ol>\n<p>综上所述，在包裹条件变量的Wait方法的时候，我们总是应该使用for语句。</p>\n<p>Q3: 条件变量的Signal方法和Broadcast方法有哪些异同？<br>A3: 条件变量的Signal方法和Broadcast方法都是被用来发送通知的，不同的是，前者的通知只会唤醒一个因此而等待的 goroutine，而后者的通知却会唤醒所有为此等待的 goroutine。条件变量的Wait方法总会把当前的 goroutine 添加到通知队列的队尾，而它的Signal方法总会从通知队列的队首开始查找可被唤醒的 goroutine。所以，因Signal方法的通知而被唤醒的 goroutine 一般都是最早等待的那一个。</p>\n<h1 id=\"进程线程goroutine\"><a href=\"#进程线程goroutine\" class=\"headerlink\" title=\"进程线程goroutine\"></a>进程线程goroutine</h1><h1 id=\"原子操作\"><a href=\"#原子操作\" class=\"headerlink\" title=\"原子操作\"></a>原子操作</h1><p>Q1: sync/atomic包中提供了几种原子操作？可操作的数据类型又有哪些？</p>\n<p>A1: sync/atomic包中的函数可以做的原子操作有：加法（add）、比较并交换（compare and swap，简称 CAS）、加载（load）、存储（store）和交换（swap）。</p>\n<p>这些函数针对的数据类型并不多。但是，对这些类型中的每一个，sync/atomic包都会有一套函数给予支持。这些数据类型有：int32、int64、uint32、uint64、uintptr，以及unsafe包中的Pointer。不过，针对unsafe.Pointer类型，该包并未提供进行原子加法操作的函数。</p>\n<p>此外，sync/atomic包还提供了一个名为Value的类型，它可以被用来存储任意类型的值。</p>\n<p>Q2: atomic.AddUint32和atomic.AddUint64函数做原子减法,如何实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   num := uint32(18)</span><br><span class=\"line\">fmt.Printf(&quot;The number: %d\\n&quot;, num)</span><br><span class=\"line\">delta := int32(-3)</span><br><span class=\"line\">atomic.AddUint32(&amp;num, uint32(delta))</span><br><span class=\"line\">fmt.Printf(&quot;The number: %d\\n&quot;, num)</span><br><span class=\"line\">atomic.AddUint32(&amp;num, ^uint32(-(-3)-1))</span><br><span class=\"line\">fmt.Printf(&quot;The number: %d\\n&quot;, num)</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Printf(&quot;The two&apos;s complement of %d: %b\\n&quot;,</span><br><span class=\"line\">\tdelta, uint32(delta)) // -3的补码。</span><br><span class=\"line\">fmt.Printf(&quot;The equivalent: %b\\n&quot;, ^uint32(-(-3)-1)) // 与-3的补码相同。</span><br><span class=\"line\">fmt.Println()</span><br><span class=\"line\">//uint32(delta)和^uint32(-N-1)) 是两种求补码的方式</span><br></pre></td></tr></table></figure>\n\n<p>Q3: 比较并交换操作与交换操作相比有什么不同？优势在哪里？</p>\n<p>A3: 比较并交换操作即 CAS操作，是有条件的交换操作，只有在条件满足的情况下才会进行值的交换。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;num2, <span class=\"number\">10</span>, <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"The second number has gone to zero.\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">break</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">time.Sleep(time.Millisecond * <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h2><ol>\n<li>不要把内部使用的原子值暴露给外界。比如，声明一个全局的原子变量并不是一个正确的做法。这个变量的访问权限最起码也应该是包级私有的。</li>\n<li>如果不得不让包外，或模块外的代码使用你的原子值，那么可以声明一个包级私有的原子变量，然后再通过一个或多个公开的函数，让外界间接地使用到它。注意，这种情况下不要把原子值传递到外界，不论是传递原子值本身还是它的指针值。</li>\n<li>如果通过某个函数可以向内部的原子值存储值的话，那么就应该在这个函数中先判断被存储值类型的合法性。若不合法，则应该直接返回对应的错误值，从而避免 panic 的发生。</li>\n<li>如果可能的话，我们可以把原子值封装到一个数据类型中，比如一个结构体类型。这样，我们既可以通过该类型的方法更加安全地存储值，又可以在该类型中包含可存储值的合法类型信息。</li>\n</ol>\n<h1 id=\"sync-WaitGroup和sync-Once\"><a href=\"#sync-WaitGroup和sync-Once\" class=\"headerlink\" title=\"sync.WaitGroup和sync.Once\"></a>sync.WaitGroup和sync.Once</h1><ul>\n<li>使用WaitGroup值:先统一Add，再并发Done，最后Wait</li>\n<li>Once类型使用互斥锁和原子操作实现了功能，而WaitGroup类型中只用到了原子操作。</li>\n</ul>"},{"title":"React 原则与生命周期","author":"江小渔","date":"2019-07-03T12:43:00.000Z","_content":"# React原则\n代码相关: https://codesandbox.io/s/6n20nrzlxz\n\n<!--more-->\n#### 何时创建组件:单一职责原则\n1. 每个组件只做一件事情 \n2. 如果组件变得复杂那应该拆分成小组件 \n\n#### 数据状态管理 DRY原则\n1. 能计算得到的状态就要单独存储 \n2. 组件尽量无状态f所需数据通过 props 获取\n\n# React生命周期\n\n![upload successful](/images/pasted-1.png)\n图片来源:http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\n\n#### constructor\n1. 用初始化内部状态(很少使用)\n2. 唯一可以直接修改 state 的地方\n\n#### getDerivedStateFromProps(Derived-导出)\n1. 当 state 需要从 props 初始化时使用 \n2. 尽量不要使用(维护两者状态一致性会增加复杂度)\n3. 每次 render 都会调用 \n4. 典型场景: 表单控件获取默认值 \n\n\n#### componentDidMount\n1. UI 渲染完成后调用 \n2. 只执行一次 \n3. 典型场景: 获取外部资源\n\n#### componentWillMount\n1. 组件移除时被调用 \n2. 典型场景: 资源释放\n\n#### getSnapshotBeforeUpdate\n1. 在页面 render 之前调用,state 已更新 \n2. 典型场景: 获取 render 之前的 DOM 状态\n3. 它的返回值将作为 componentDidUpdate() 的第三个参数 “snapshot” 参数传递\n\n#### componentDidUpdate\n1. 在页面 UI 更新时调用\n2. 典型场景:页面需要根据 props 变化重新获取数据\n\n#### shouldComponentUpdate\n1. 决定 Virtual DOM 是否要重绘 \n2. 一般可以由 PureComponent 自动实现 \n3. 典型场景: 性能优化\n\n参考: https://react.docschina.org/docs/react-component.html","source":"_posts/React-重学.md","raw":"title: React 原则与生命周期\nauthor: 江小渔\ntags:\n  - React\ncategories:\n  - React\ndate: 2019-07-03 20:43:00\n---\n# React原则\n代码相关: https://codesandbox.io/s/6n20nrzlxz\n\n<!--more-->\n#### 何时创建组件:单一职责原则\n1. 每个组件只做一件事情 \n2. 如果组件变得复杂那应该拆分成小组件 \n\n#### 数据状态管理 DRY原则\n1. 能计算得到的状态就要单独存储 \n2. 组件尽量无状态f所需数据通过 props 获取\n\n# React生命周期\n\n![upload successful](/images/pasted-1.png)\n图片来源:http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\n\n#### constructor\n1. 用初始化内部状态(很少使用)\n2. 唯一可以直接修改 state 的地方\n\n#### getDerivedStateFromProps(Derived-导出)\n1. 当 state 需要从 props 初始化时使用 \n2. 尽量不要使用(维护两者状态一致性会增加复杂度)\n3. 每次 render 都会调用 \n4. 典型场景: 表单控件获取默认值 \n\n\n#### componentDidMount\n1. UI 渲染完成后调用 \n2. 只执行一次 \n3. 典型场景: 获取外部资源\n\n#### componentWillMount\n1. 组件移除时被调用 \n2. 典型场景: 资源释放\n\n#### getSnapshotBeforeUpdate\n1. 在页面 render 之前调用,state 已更新 \n2. 典型场景: 获取 render 之前的 DOM 状态\n3. 它的返回值将作为 componentDidUpdate() 的第三个参数 “snapshot” 参数传递\n\n#### componentDidUpdate\n1. 在页面 UI 更新时调用\n2. 典型场景:页面需要根据 props 变化重新获取数据\n\n#### shouldComponentUpdate\n1. 决定 Virtual DOM 是否要重绘 \n2. 一般可以由 PureComponent 自动实现 \n3. 典型场景: 性能优化\n\n参考: https://react.docschina.org/docs/react-component.html","slug":"React-重学","published":1,"updated":"2020-02-04T07:26:52.881Z","_id":"ck67jp5zy000m28dhb3c861ye","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"React原则\"><a href=\"#React原则\" class=\"headerlink\" title=\"React原则\"></a>React原则</h1><p>代码相关: <a href=\"https://codesandbox.io/s/6n20nrzlxz\" target=\"_blank\" rel=\"noopener\">https://codesandbox.io/s/6n20nrzlxz</a></p>\n<a id=\"more\"></a>\n<h4 id=\"何时创建组件-单一职责原则\"><a href=\"#何时创建组件-单一职责原则\" class=\"headerlink\" title=\"何时创建组件:单一职责原则\"></a>何时创建组件:单一职责原则</h4><ol>\n<li>每个组件只做一件事情 </li>\n<li>如果组件变得复杂那应该拆分成小组件 </li>\n</ol>\n<h4 id=\"数据状态管理-DRY原则\"><a href=\"#数据状态管理-DRY原则\" class=\"headerlink\" title=\"数据状态管理 DRY原则\"></a>数据状态管理 DRY原则</h4><ol>\n<li>能计算得到的状态就要单独存储 </li>\n<li>组件尽量无状态f所需数据通过 props 获取</li>\n</ol>\n<h1 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h1><p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"><br>图片来源:<a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"noopener\">http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p>\n<h4 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h4><ol>\n<li>用初始化内部状态(很少使用)</li>\n<li>唯一可以直接修改 state 的地方</li>\n</ol>\n<h4 id=\"getDerivedStateFromProps-Derived-导出\"><a href=\"#getDerivedStateFromProps-Derived-导出\" class=\"headerlink\" title=\"getDerivedStateFromProps(Derived-导出)\"></a>getDerivedStateFromProps(Derived-导出)</h4><ol>\n<li>当 state 需要从 props 初始化时使用 </li>\n<li>尽量不要使用(维护两者状态一致性会增加复杂度)</li>\n<li>每次 render 都会调用 </li>\n<li>典型场景: 表单控件获取默认值 </li>\n</ol>\n<h4 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h4><ol>\n<li>UI 渲染完成后调用 </li>\n<li>只执行一次 </li>\n<li>典型场景: 获取外部资源</li>\n</ol>\n<h4 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a>componentWillMount</h4><ol>\n<li>组件移除时被调用 </li>\n<li>典型场景: 资源释放</li>\n</ol>\n<h4 id=\"getSnapshotBeforeUpdate\"><a href=\"#getSnapshotBeforeUpdate\" class=\"headerlink\" title=\"getSnapshotBeforeUpdate\"></a>getSnapshotBeforeUpdate</h4><ol>\n<li>在页面 render 之前调用,state 已更新 </li>\n<li>典型场景: 获取 render 之前的 DOM 状态</li>\n<li>它的返回值将作为 componentDidUpdate() 的第三个参数 “snapshot” 参数传递</li>\n</ol>\n<h4 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a>componentDidUpdate</h4><ol>\n<li>在页面 UI 更新时调用</li>\n<li>典型场景:页面需要根据 props 变化重新获取数据</li>\n</ol>\n<h4 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h4><ol>\n<li>决定 Virtual DOM 是否要重绘 </li>\n<li>一般可以由 PureComponent 自动实现 </li>\n<li>典型场景: 性能优化</li>\n</ol>\n<p>参考: <a href=\"https://react.docschina.org/docs/react-component.html\" target=\"_blank\" rel=\"noopener\">https://react.docschina.org/docs/react-component.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"React原则\"><a href=\"#React原则\" class=\"headerlink\" title=\"React原则\"></a>React原则</h1><p>代码相关: <a href=\"https://codesandbox.io/s/6n20nrzlxz\" target=\"_blank\" rel=\"noopener\">https://codesandbox.io/s/6n20nrzlxz</a></p>","more":"<h4 id=\"何时创建组件-单一职责原则\"><a href=\"#何时创建组件-单一职责原则\" class=\"headerlink\" title=\"何时创建组件:单一职责原则\"></a>何时创建组件:单一职责原则</h4><ol>\n<li>每个组件只做一件事情 </li>\n<li>如果组件变得复杂那应该拆分成小组件 </li>\n</ol>\n<h4 id=\"数据状态管理-DRY原则\"><a href=\"#数据状态管理-DRY原则\" class=\"headerlink\" title=\"数据状态管理 DRY原则\"></a>数据状态管理 DRY原则</h4><ol>\n<li>能计算得到的状态就要单独存储 </li>\n<li>组件尽量无状态f所需数据通过 props 获取</li>\n</ol>\n<h1 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h1><p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"><br>图片来源:<a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"noopener\">http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p>\n<h4 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h4><ol>\n<li>用初始化内部状态(很少使用)</li>\n<li>唯一可以直接修改 state 的地方</li>\n</ol>\n<h4 id=\"getDerivedStateFromProps-Derived-导出\"><a href=\"#getDerivedStateFromProps-Derived-导出\" class=\"headerlink\" title=\"getDerivedStateFromProps(Derived-导出)\"></a>getDerivedStateFromProps(Derived-导出)</h4><ol>\n<li>当 state 需要从 props 初始化时使用 </li>\n<li>尽量不要使用(维护两者状态一致性会增加复杂度)</li>\n<li>每次 render 都会调用 </li>\n<li>典型场景: 表单控件获取默认值 </li>\n</ol>\n<h4 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h4><ol>\n<li>UI 渲染完成后调用 </li>\n<li>只执行一次 </li>\n<li>典型场景: 获取外部资源</li>\n</ol>\n<h4 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a>componentWillMount</h4><ol>\n<li>组件移除时被调用 </li>\n<li>典型场景: 资源释放</li>\n</ol>\n<h4 id=\"getSnapshotBeforeUpdate\"><a href=\"#getSnapshotBeforeUpdate\" class=\"headerlink\" title=\"getSnapshotBeforeUpdate\"></a>getSnapshotBeforeUpdate</h4><ol>\n<li>在页面 render 之前调用,state 已更新 </li>\n<li>典型场景: 获取 render 之前的 DOM 状态</li>\n<li>它的返回值将作为 componentDidUpdate() 的第三个参数 “snapshot” 参数传递</li>\n</ol>\n<h4 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a>componentDidUpdate</h4><ol>\n<li>在页面 UI 更新时调用</li>\n<li>典型场景:页面需要根据 props 变化重新获取数据</li>\n</ol>\n<h4 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h4><ol>\n<li>决定 Virtual DOM 是否要重绘 </li>\n<li>一般可以由 PureComponent 自动实现 </li>\n<li>典型场景: 性能优化</li>\n</ol>\n<p>参考: <a href=\"https://react.docschina.org/docs/react-component.html\" target=\"_blank\" rel=\"noopener\">https://react.docschina.org/docs/react-component.html</a></p>"},{"title":"Untitled","author":"江小渔","_content":"","source":"_discarded//Untitled.md","raw":"title: Untitled\nauthor: 江小渔\ndate: 2020-02-04 15:33:16\ntags:\n---\n","slug":"Untitled","published":0,"date":"2020-02-04T07:33:12.919Z","updated":"2020-02-04T07:33:16.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck67kgbjb0000kwdh2xok1db1","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"ck67jp5v1000028dhifffmd3s","category_id":"ck67jp5v8000228dh2g6qojfs","_id":"ck67jp5vd000728dhsielwxm2"},{"post_id":"ck67jp5v6000128dhcwqwmbrr","category_id":"ck67jp5v8000228dh2g6qojfs","_id":"ck67jp5ve000928dhj1brm3cl"},{"post_id":"ck67jp5zx000l28dhpnng3kyp","category_id":"ck67jp5v8000228dh2g6qojfs","_id":"ck67jp601000q28dh21xo4ggz"},{"post_id":"ck67jp5zy000m28dhb3c861ye","category_id":"ck67jp600000o28dhhiuv0ey4","_id":"ck67jp602000s28dhlbflbdbc"}],"PostTag":[{"post_id":"ck67jp5v1000028dhifffmd3s","tag_id":"ck67jp5va000328dh3cfpo0kh","_id":"ck67jp5vd000628dhj7yxzcdb"},{"post_id":"ck67jp5v6000128dhcwqwmbrr","tag_id":"ck67jp5va000328dh3cfpo0kh","_id":"ck67jp5ve000828dhtt9c5vu9"},{"post_id":"ck67jp5wg000a28dhhrnsht9r","tag_id":"ck67jp5wl000e28dhvznuzbv8","_id":"ck67jp5wq000j28dh70k3gv70"},{"post_id":"ck67jp5wn000h28dh2w8w8qhp","tag_id":"ck67jp5wp000i28dhfz1l5lq5","_id":"ck67jp5wr000k28dhvtltg688"},{"post_id":"ck67jp5zx000l28dhpnng3kyp","tag_id":"ck67jp5va000328dh3cfpo0kh","_id":"ck67jp600000n28dhjb0j4vw8"},{"post_id":"ck67jp5zy000m28dhb3c861ye","tag_id":"ck67jp601000p28dhrqjwnnm8","_id":"ck67jp602000r28dhej5hbksz"}],"Tag":[{"name":"golang","_id":"ck67jp5va000328dh3cfpo0kh"},{"name":"基础","_id":"ck67jp5wl000e28dhvznuzbv8"},{"name":"Hexo","_id":"ck67jp5wp000i28dhfz1l5lq5"},{"name":"React","_id":"ck67jp601000p28dhrqjwnnm8"}]}}